/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:46:12 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol HDActivityCacheStatisticsBuilderSourceOrderDelegate;
#import <HealthDaemon/HealthDaemon-Structs.h>
@class HKQuantity, NSNumber, NSString;

@interface HDActivityCacheStatisticsBuilder : NSObject {

	vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >* _workouts;
	vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >* _standHourSamples;
	vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >* _activationLogSamples;
	HKQuantity* _lastActiveEnergyValue;
	HKQuantity* _lastDistanceWalkingValue;
	HKQuantity* _lastFlightsClimbedValue;
	NSNumber* _lastStepCountValue;
	NSNumber* _lastStandHourValue;
	NSNumber* _lastExerciseMinuteValue;
	vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >* _activeSourcesList;
	map<_HKDataTypeCode, std::__1::map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >, std::__1::less<_HKDataTypeCode>, std::__1::allocator<std::__1::pair<const _HKDataTypeCode, std::__1::map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > > > > >* _sourceTotalsByIntervalIndexByTypeCode;
	double _builderStartTime;
	double _builderEndTime;
	NSString* _loggingName;
	double _intervalDuration;
	id<HDActivityCacheStatisticsBuilderSourceOrderDelegate> _sourceOrderDelegate;

}

@property (assign,nonatomic) double intervalDuration;                                                                         //@synthesize intervalDuration=_intervalDuration - In the implementation block
@property (assign,nonatomic,__weak) id<HDActivityCacheStatisticsBuilderSourceOrderDelegate> sourceOrderDelegate;              //@synthesize sourceOrderDelegate=_sourceOrderDelegate - In the implementation block
-(id)init;
-(id)createStatisticsCollectionWithType:(id)arg1 intervalComponents:(id)arg2 calendar:(id)arg3 ;
-(void)addWorkouts:(const vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >*)arg1 ;
-(id)activeEnergyValue;
-(id)distanceWalkingValue;
-(long long)standHourValue;
-(long long)exerciseMinuteValue;
-(long long)stepCountValue;
-(id)initWithTimePeriod:(id)arg1 loggingName:(id)arg2 ;
-(void)setSourceOrderDelegate:(id<HDActivityCacheStatisticsBuilderSourceOrderDelegate>)arg1 ;
-(void)addActivationLogSamples:(const vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >*)arg1 ;
-(void)addStandHourSamples:(const vector<HDActivityCacheStatisticsBuilderStandHourSample, std::__1::allocator<HDActivityCacheStatisticsBuilderStandHourSample> >*)arg1 ;
-(void)addSample:(HDActivityCacheStatisticsBuilderSample)arg1 typeCode:(long long)arg2 ;
-(vector<long long, std::__1::allocator<long long> >*)_sourceOrderForTypeCode:(long long)arg1 ;
-(double)_sumSamplesInSourceMap:(map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg1 orderedSources:(vector<long long, std::__1::allocator<long long> >*)arg2 ;
-(id)_workoutIdentifiersStringForActiveSource:(HDActivityCacheActiveSource*)arg1 ;
-(id)_loggingPrefix;
-(void)_logActiveSourcesList:(vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >*)arg1 ;
-(void)_resetAllCachedValues;
-(void)_clearActiveSources;
-(void)_clearCachedValueForTypeCode:(long long)arg1 ;
-(vector<HDActivityCacheActiveSource, std::__1::allocator<HDActivityCacheActiveSource> >*)_activeSourceVectorFromActivationLogSamples:(const vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >*)arg1 ;
-(void)_addSample:(HDActivityCacheStatisticsBuilderSample)arg1 toSourceMap:(map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg2 ;
-(void)_addSamples:(const vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >*)arg1 toSourceMap:(map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg2 ;
-(BOOL)_sourceMapIsEmpty:(const map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg1 ;
-(double)_minTimestampInSourceMap:(const map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg1 ;
-(double)_maxTimestampInSourceMap:(const map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg1 ;
-(double)_sumSamplesInSourceMap:(map<long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > >, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, std::__1::map<long long, double, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, double> > > > > >*)arg1 orderedSources:(vector<long long, std::__1::allocator<long long> >*)arg2 strictStartTime:(double)arg3 strictEndTime:(double)arg4 ;
-(void)_loadActiveSourceList;
-(id)flightsClimbedValue;
-(void)addSamples:(const vector<HDActivityCacheStatisticsBuilderSample, std::__1::allocator<HDActivityCacheStatisticsBuilderSample> >*)arg1 typeCode:(long long)arg2 ;
-(double)intervalDuration;
-(void)setIntervalDuration:(double)arg1 ;
-(id<HDActivityCacheStatisticsBuilderSourceOrderDelegate>)sourceOrderDelegate;
@end

