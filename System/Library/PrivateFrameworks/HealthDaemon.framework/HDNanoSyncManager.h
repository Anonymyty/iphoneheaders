/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:46:09 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/HDDiagnosticObject.h>
#import <libobjc.A.dylib/HDHealthDaemonReadyObserver.h>
#import <libobjc.A.dylib/HDNanoSyncStoreDelegate.h>
#import <libobjc.A.dylib/HDNanoSyncSessionDelegate.h>
#import <libobjc.A.dylib/HDDatabaseProtectedDataObserver.h>
#import <libobjc.A.dylib/HDDataObserver.h>
#import <libobjc.A.dylib/HDIDSMessageCenterDelegate.h>
#import <libobjc.A.dylib/HDProcessStateObserver.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class HDPairedSyncManager, HDDaemon, NSObject, HDIDSMessageCenter, NSHashTable, HDKeyValueDomain, HDNanoSyncStore, NSMutableDictionary, NSArray, NSSet, NSDate, NSString;

@interface HDNanoSyncManager : NSObject <HDDiagnosticObject, HDHealthDaemonReadyObserver, HDNanoSyncStoreDelegate, HDNanoSyncSessionDelegate, HDDatabaseProtectedDataObserver, HDDataObserver, HDIDSMessageCenterDelegate, HDProcessStateObserver> {

	BOOL _isMaster;
	BOOL _isPairingActivated;
	BOOL _enablePeriodicSyncTimer;
	BOOL _waitingForFirstUnlock;
	double _restoreTimeout;
	HDPairedSyncManager* _pairedSyncManager;
	HDDaemon* _daemon;
	NSObject*<OS_dispatch_queue> _queue;
	NSObject*<OS_dispatch_queue> _syncQueue;
	HDIDSMessageCenter* _messageCenter;
	HDIDSMessageCenter* _legacyMessageCenter;
	NSHashTable* _observers;
	HDKeyValueDomain* _nanoSyncDomain;
	HDNanoSyncStore* _activeSyncStore;
	NSMutableDictionary* _syncStoresByDeviceIdentifier;
	NSArray* _pairedDevices;
	NSSet* _pairedWatchSourceBundleIdentifiers;
	NSObject*<OS_dispatch_source> _periodicSyncTimer;
	NSDate* _lastPeriodicSyncDate;

}

@property (readonly) BOOL isMaster; 
@property (assign) BOOL isPairingActivated;                                                   //@synthesize isPairingActivated=_isPairingActivated - In the implementation block
@property (assign) double restoreTimeout;                                                     //@synthesize restoreTimeout=_restoreTimeout - In the implementation block
@property (assign) BOOL enablePeriodicSyncTimer;                                              //@synthesize enablePeriodicSyncTimer=_enablePeriodicSyncTimer - In the implementation block
@property (nonatomic,readonly) HDPairedSyncManager * pairedSyncManager;                       //@synthesize pairedSyncManager=_pairedSyncManager - In the implementation block
@property (assign,nonatomic,__weak) HDDaemon * daemon;                                        //@synthesize daemon=_daemon - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> queue;                              //@synthesize queue=_queue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> syncQueue;                          //@synthesize syncQueue=_syncQueue - In the implementation block
@property (nonatomic,retain) HDIDSMessageCenter * messageCenter;                              //@synthesize messageCenter=_messageCenter - In the implementation block
@property (nonatomic,retain) HDIDSMessageCenter * legacyMessageCenter;                        //@synthesize legacyMessageCenter=_legacyMessageCenter - In the implementation block
@property (nonatomic,retain) NSHashTable * observers;                                         //@synthesize observers=_observers - In the implementation block
@property (nonatomic,retain) HDKeyValueDomain * nanoSyncDomain;                               //@synthesize nanoSyncDomain=_nanoSyncDomain - In the implementation block
@property (nonatomic,retain) HDNanoSyncStore * activeSyncStore;                               //@synthesize activeSyncStore=_activeSyncStore - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * syncStoresByDeviceIdentifier;              //@synthesize syncStoresByDeviceIdentifier=_syncStoresByDeviceIdentifier - In the implementation block
@property (nonatomic,retain) NSArray * pairedDevices;                                         //@synthesize pairedDevices=_pairedDevices - In the implementation block
@property (copy) NSSet * pairedWatchSourceBundleIdentifiers;                                  //@synthesize pairedWatchSourceBundleIdentifiers=_pairedWatchSourceBundleIdentifiers - In the implementation block
@property (assign,nonatomic) BOOL waitingForFirstUnlock;                                      //@synthesize waitingForFirstUnlock=_waitingForFirstUnlock - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_source> periodicSyncTimer;                 //@synthesize periodicSyncTimer=_periodicSyncTimer - In the implementation block
@property (nonatomic,retain) NSDate * lastPeriodicSyncDate;                                   //@synthesize lastPeriodicSyncDate=_lastPeriodicSyncDate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(void)addObserver:(id)arg1 ;
-(void)removeObserver:(id)arg1 ;
-(NSObject*<OS_dispatch_queue>)queue;
-(void)setObservers:(NSHashTable *)arg1 ;
-(NSHashTable *)observers;
-(BOOL)isMaster;
-(void)setQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(HDDaemon *)daemon;
-(void)samplesAdded:(id)arg1 anchor:(id)arg2 ;
-(void)_unregisterForSyncTriggers;
-(BOOL)_queue_finishInitializationAfterFirstUnlockIfNecessaryWithError:(id*)arg1 ;
-(void)_queue_syncImmediatelyWithReason:(id)arg1 options:(unsigned long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)_queue_pairedSyncDidBeginForDevice:(id)arg1 messagesSentHandler:(/*^block*/id)arg2 completion:(/*^block*/id)arg3 ;
-(void)syncHealthDataWithOptions:(unsigned long long)arg1 reason:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_queue_waitForLastChanceSyncWithPairingID:(id)arg1 timeout:(double)arg2 completion:(/*^block*/id)arg3 ;
-(void)_queue_resetPairingWithCompletion:(/*^block*/id)arg1 ;
-(void)_queue_updateSyncStoresWithCompletion:(/*^block*/id)arg1 ;
-(void)_queue_requestAuthorizationForRequestRecord:(id)arg1 syncStore:(id)arg2 requestSentHandler:(/*^block*/id)arg3 completion:(/*^block*/id)arg4 ;
-(void)_queue_sendRoutineRequest:(id)arg1 syncStore:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_deviceDidPair:(id)arg1 ;
-(void)_deviceDidUnpair:(id)arg1 ;
-(void)_deviceDidBecomeActive:(id)arg1 ;
-(void)_queue_setUpMessageCentersIfNecessary;
-(void)_registerForSyncTriggers;
-(void)_queue_updateSyncStores;
-(void)_addBondiVersionMessageHandlersToMessageCenter:(id)arg1 ;
-(void)_addCoralVersionMessageHandlersToMessageCenter:(id)arg1 ;
-(void)messageCenterDidReceiveRestoreRequest:(id)arg1 ;
-(void)messageCenterDidReceiveRestoreResponse:(id)arg1 ;
-(void)messageCenterRestoreError:(id)arg1 ;
-(void)messageCenterDidReceiveChangesRequest:(id)arg1 ;
-(void)messageCenterDidReceiveChangesResponse:(id)arg1 ;
-(void)messageCenterChangesError:(id)arg1 ;
-(void)messageCenterDidReceiveAuthorizationResponse:(id)arg1 ;
-(void)messageCenterDidReceiveAuthorizationRequest:(id)arg1 ;
-(void)messageCenterDidReceiveAuthorizationError:(id)arg1 ;
-(void)messageCenterDidReceiveAuthorizationCompleteRequest:(id)arg1 ;
-(void)messageCenterDidReceiveRoutineResponse:(id)arg1 ;
-(void)messageCenterDidReceiveRoutineRequest:(id)arg1 ;
-(void)messageCenterDidReceiveRoutineError:(id)arg1 ;
-(id)_queue_messageCenterForSyncStore:(id)arg1 ;
-(void)_logIncomingRequest:(id)arg1 ;
-(id)_queue_syncStoreForIDSDevice:(id)arg1 updateIfNecessary:(BOOL)arg2 ;
-(void)_logIncomingResponse:(id)arg1 ;
-(void)_logOutgoingMessageError:(id)arg1 ;
-(id)_queue_syncStoreForMessageCenterError:(id)arg1 ;
-(void)_queue_handleRestoreRequest:(id)arg1 syncStore:(id)arg2 ;
-(void)_handleIncomingRequest:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)_queue_handleRestoreResponse:(id)arg1 syncStore:(id)arg2 ;
-(void)_handleIncomingResponse:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)_queue_receiveChangeRequest:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_receiveChangeResponse:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_changeRequestDidFailToSendWithError:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_changeResponseDidFailToSendWithError:(id)arg1 syncStore:(id)arg2 ;
-(void)_handleOutgoingMessageError:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)_queue_receiveAuthorizationRequest:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_receiveAuthorizationResponse:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_authorizationRequestDidFailToSendWithError:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_receiveAuthorizationCompleteRequest:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_receiveRoutineRequest:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_receiveRoutineResponse:(id)arg1 syncStore:(id)arg2 ;
-(void)_queue_routineRequestDidFailToSendWithError:(id)arg1 syncStore:(id)arg2 ;
-(void)setPairedWatchSourceBundleIdentifiers:(NSSet *)arg1 ;
-(void)_queue_startPeriodicSyncTimerIfNecessary;
-(void)_showFitnessAppIfNeeded;
-(void)_queue_updateDeviceNameIfNecessaryWithSyncStore:(id)arg1 ;
-(void)_queue_cancelPeriodicSyncTimer;
-(void)_queue_updatePairingActivated;
-(void)_queue_generateWatchActivationSamples;
-(BOOL)_queue_permitSyncWithError:(id*)arg1 ;
-(void)_queue_beginProactiveSyncWithCompletion:(/*^block*/id)arg1 ;
-(void)_queue_transitionToRestoreInProgressWithSyncStore:(id)arg1 ;
-(void)_sendFinalStatusMessageForSyncSession:(id)arg1 didFinishSuccessfully:(BOOL)arg2 error:(id)arg3 ;
-(void)_resetSyncAnchorsForStore:(id)arg1 ;
-(void)_queue_beginRestoreWithStore:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_queue_transitionToRestoreIncompleteWithSyncStore:(id)arg1 error:(id)arg2 ;
-(BOOL)isPairingActivated;
-(void)_setPairingActivated:(BOOL)arg1 ;
-(void)_queue_notifyObserversStateChanged;
-(id)_queue_nanoSyncKeyValueDomain;
-(void)_queue_synchronizeWithOptions:(unsigned long long)arg1 restoreMessagesSentHandler:(/*^block*/id)arg2 targetSyncStore:(id)arg3 reason:(id)arg4 completion:(/*^block*/id)arg5 ;
-(double)restoreTimeout;
-(void)restoreTimedOutWithSyncStore:(id)arg1 ;
-(void)_queue_sendRestoreMessageWithStore:(id)arg1 restoreUUID:(id)arg2 restores:(id)arg3 sequenceNumber:(long long)arg4 statusCode:(int)arg5 ;
-(void)_queue_sendRequest:(id)arg1 syncStore:(id)arg2 ;
-(BOOL)_syncQueue_applyActivationRestore:(id)arg1 request:(id)arg2 syncStore:(id)arg3 error:(id*)arg4 ;
-(void)_queue_transitionToRestoreCompleteWithSyncStore:(id)arg1 ;
-(void)_queue_sendResponse:(id)arg1 syncStore:(id)arg2 ;
-(BOOL)_queue_isReadyForSyncWithSyncStore:(id)arg1 error:(id*)arg2 ;
-(void)_didReceiveChangeRequest;
-(id)_queue_eligibleInactiveSyncStores;
-(void)_syncQueue_forwardSpeculativeChangeSetIfNecessaryForChanges:(id)arg1 destinationSyncStores:(id)arg2 originSyncStore:(id)arg3 ;
-(BOOL)enablePeriodicSyncTimer;
-(void)_queue_periodicSyncTimerFired;
-(void)_queue_performNextProactiveSyncWithRemainingDevices:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_queue_sendSpeculativeChangeSet:(id)arg1 syncStore:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_syncImmediatelyWithReason:(id)arg1 options:(unsigned long long)arg2 ;
-(void)_userCharacteristicsDidChange:(id)arg1 ;
-(void)_userPreferencesDidChange:(id)arg1 ;
-(void)_syncImmediatelyWithReason:(id)arg1 ;
-(void)_queue_sendChangeSet:(id)arg1 status:(id)arg2 session:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)_sendFinalMessageForSyncSession:(id)arg1 status:(id)arg2 success:(BOOL)arg3 error:(id)arg4 ;
-(id)diagnosticDescription;
-(void)_foregroundStatusForClientChanged:(id)arg1 ;
-(void)daemonReady:(id)arg1 ;
-(void)nanoSyncStore:(id)arg1 remoteSystemBuildVersionDidChange:(id)arg2 ;
-(void)nanoSyncStore:(id)arg1 restoreStateDidChange:(long long)arg2 ;
-(void)nanoSyncStore:(id)arg1 deviceNameDidChange:(id)arg2 ;
-(void)nanoSyncSession:(id)arg1 sendChanges:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)nanoSyncSession:(id)arg1 didFinishSuccessfully:(BOOL)arg2 error:(id)arg3 ;
-(void)database:(id)arg1 protectedDataDidBecomeAvailable:(BOOL)arg2 ;
-(void)messageCenter:(id)arg1 didResolveIDSIdentifierForRequest:(id)arg2 ;
-(void)messageCenter:(id)arg1 didResolveIDSIdentifierForResponse:(id)arg2 ;
-(void)messageCenter:(id)arg1 activeDeviceDidChange:(id)arg2 acknowledgementHandler:(/*^block*/id)arg3 ;
-(void)processSuspended:(id)arg1 ;
-(void)processResumed:(id)arg1 ;
-(void)processDidEnterBackground:(id)arg1 ;
-(void)processDidEnterForeground:(id)arg1 ;
-(id)initWithDaemon:(id)arg1 isMaster:(BOOL)arg2 ;
-(void)pairedSyncDidBeginForDevice:(id)arg1 messagesSentHandler:(/*^block*/id)arg2 completion:(/*^block*/id)arg3 ;
-(void)syncHealthDataWithOptions:(unsigned long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)waitForLastChanceSyncWithDevicePairingID:(id)arg1 timeout:(double)arg2 completion:(/*^block*/id)arg3 ;
-(void)resetPairingWithCompletion:(/*^block*/id)arg1 ;
-(void)updatePairedDevicesWithCompletion:(/*^block*/id)arg1 ;
-(void)requestAuthorizationForRequestRecord:(id)arg1 requestSentHandler:(/*^block*/id)arg2 completion:(/*^block*/id)arg3 ;
-(void)sendRoutineRequest:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_achievementsWereAdded:(id)arg1 ;
-(void)_workoutSamplesWereAssociated:(id)arg1 ;
-(void)_watchOffWristNotification:(id)arg1 ;
-(void)setRestoreTimeout:(double)arg1 ;
-(void)setEnablePeriodicSyncTimer:(BOOL)arg1 ;
-(HDPairedSyncManager *)pairedSyncManager;
-(void)setDaemon:(HDDaemon *)arg1 ;
-(NSObject*<OS_dispatch_queue>)syncQueue;
-(void)setSyncQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(HDIDSMessageCenter *)messageCenter;
-(void)setMessageCenter:(HDIDSMessageCenter *)arg1 ;
-(HDIDSMessageCenter *)legacyMessageCenter;
-(void)setLegacyMessageCenter:(HDIDSMessageCenter *)arg1 ;
-(HDKeyValueDomain *)nanoSyncDomain;
-(void)setNanoSyncDomain:(HDKeyValueDomain *)arg1 ;
-(HDNanoSyncStore *)activeSyncStore;
-(void)setActiveSyncStore:(HDNanoSyncStore *)arg1 ;
-(NSMutableDictionary *)syncStoresByDeviceIdentifier;
-(void)setSyncStoresByDeviceIdentifier:(NSMutableDictionary *)arg1 ;
-(NSArray *)pairedDevices;
-(void)setPairedDevices:(NSArray *)arg1 ;
-(NSSet *)pairedWatchSourceBundleIdentifiers;
-(BOOL)waitingForFirstUnlock;
-(void)setWaitingForFirstUnlock:(BOOL)arg1 ;
-(NSObject*<OS_dispatch_source>)periodicSyncTimer;
-(void)setPeriodicSyncTimer:(NSObject*<OS_dispatch_source>)arg1 ;
-(NSDate *)lastPeriodicSyncDate;
-(void)setLastPeriodicSyncDate:(NSDate *)arg1 ;
@end

