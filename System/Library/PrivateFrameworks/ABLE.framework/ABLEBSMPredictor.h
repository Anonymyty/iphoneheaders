/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:36:30 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/ABLE.framework/ABLE
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_source;
@class ABLECoreData, NSObject, NSDate, CDSession, ABLEBSMRoutineMonitor, ABLEBSMPluginMonitor, NSDictionary, NSArray, NSLocale, NSUserDefaults, NSMutableArray;

@interface ABLEBSMPredictor : NSObject {

	int autoNotifyToken;
	BOOL autoNotifyEnabled;
	ABLECoreData* ableCoreData;
	NSObject*<OS_dispatch_queue> cdQueue;
	NSObject*<OS_dispatch_queue> syncQueue;
	NSObject*<OS_dispatch_queue> timerQueue;
	NSObject*<OS_dispatch_source> timer;
	NSObject*<OS_dispatch_source> statTimer;
	NSDate* lastRun;
	NSDate* previousRun;
	BOOL haveBatteryAndPluginData;
	CDSession* cdSession;
	BOOL ekEnabled;
	ABLEBSMRoutineMonitor* routineMonitor;
	int bsmToken;
	BOOL bsmEnabled;
	NSDate* lastBSMDisableDate;
	int lockstateToken;
	ABLEBSMPluginMonitor* pluginMonitor;
	BOOL bsmThrown;
	BOOL bsmDisplayed;
	NSDate* lastDeniedDate;
	long long consecutiveDenies;
	NSDictionary* predictionConfig;
	NSArray* ablePrediction;
	NSDate* ablePredictionDate;
	NSDate* lastThrown;
	NSDate* firstDetect;
	NSDate* ableNextChargeDate;
	NSDate* projNextChargeDate;
	NSDate* ableZeroDate;
	NSDate* projZeroDate;
	double ableDrain;
	double ableZero;
	double projDrain;
	double projZero;
	NSDate* predNextChargeDate;
	NSDate* predNextZeroDate;
	BOOL isTraveling;
	NSDate* lastInfoNoteShown;
	NSLocale* currLocale;
	NSUserDefaults* defaults;
	BOOL isInternal;
	NSDate* lastReportedDate;
	NSMutableArray* ableChargePredictions;
	NSMutableArray* histChargePredictions;
	NSMutableArray* predictedZeroDates;
	NSMutableArray* projectedZeroDates;

}
+(id)sharedInstanceWithSession:(id)arg1 ;
+(BOOL)isSupported;
-(void)initializeValues;
-(void)handleAutoNotifySettingChanged;
-(void)triggerNotificationIfNecessary;
-(void)reportStatsRaw;
-(BOOL)updateLastReportedDate:(id)arg1 ;
-(void)saveDate:(id)arg1 forKey:(id)arg2 ;
-(id)predictionToString:(id)arg1 ;
-(BOOL)updateNotificationDisplayed:(BOOL)arg1 ;
-(BOOL)updateLastThrown:(id)arg1 ;
-(BOOL)updateFirstDetect:(id)arg1 ;
-(BOOL)bsmEnabledAfterDate:(id)arg1 ;
-(BOOL)updateConsecutiveDenies:(long long)arg1 ;
-(id)predictionFromString:(id)arg1 ;
-(void)resetBSMValuesIfApplicable;
-(id)loadPredictionsForKey:(id)arg1 ;
-(void)updatePredictionArray:(id)arg1 forKey:(id)arg2 ;
-(void)incrementFalsePositivesForPredictions:(id)arg1 withTruth:(id)arg2 withKey:(id)arg3 ;
-(double)leewayAdjustmentForEventsAt:(id)arg1 ;
-(double)leewayAdjustmentForTravel;
-(double)drainRateMultiplierWithLevel:(double)arg1 predictedLevel:(double)arg2 ;
-(id)zeroDateFromABLEPredictionAfterDate:(id)arg1 charge:(double)arg2 prediction:(id)arg3 atTime:(id)arg4 nextCharge:(id)arg5 ;
-(id)zeroDateFromDrainAfterDate:(id)arg1 charge:(double)arg2 ;
-(BOOL)shouldConsiderBSMWithCharge:(double)arg1 ;
-(double)leewayAdjustmentForDate:(id)arg1 ;
-(BOOL)updateLastRun:(id)arg1 ;
-(void)recordPrediction:(id)arg1 predDate:(id)arg2 ;
-(BOOL)updateABLEPrediction:(id)arg1 ;
-(BOOL)updateABLEPredictionDate:(id)arg1 ;
-(id)predictedChargeDateAfterDate:(id)arg1 withPrediction:(id)arg2 atTime:(id)arg3 withCharge:(double)arg4 ;
-(BOOL)updateNextChargeDate:(id)arg1 ;
-(id)predictedZeroDateAfterDate:(id)arg1 charge:(double)arg2 prediction:(id)arg3 atTime:(id)arg4 nextCharge:(id)arg5 ;
-(BOOL)updateNextZeroDate:(id)arg1 ;
-(void)recordPredictionsforABLECharge:(id)arg1 forHistCharge:(id)arg2 forPredZero:(id)arg3 forProjZero:(id)arg4 ;
-(BOOL)shouldDisplayBSMNotificationWithDate:(id)arg1 charge:(double)arg2 chargeDate:(id)arg3 zeroDate:(id)arg4 ;
-(void)registerForUnlockNotification:(BOOL)arg1 ;
-(void)recordPredictedKeyEventsOnDate:(id)arg1 charge:(double)arg2 ;
-(void)displayNotificationRaw:(BOOL)arg1 ;
-(void)handleUserResponse:(unsigned long long)arg1 ;
-(BOOL)updateLastDeniedDate:(id)arg1 ;
-(void)updateArray:(id)arg1 forKey:(id)arg2 ;
-(id)initializeArrayWithKey:(id)arg1 ;
-(void)updateConfiguration;
-(void)dealloc;
-(void)start;
-(id)initWithSession:(id)arg1 ;
-(BOOL)isInternalBuild;
@end

