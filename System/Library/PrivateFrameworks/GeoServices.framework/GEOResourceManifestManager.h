/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:45:40 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <GeoServices/GeoServices-Structs.h>
#import <libobjc.A.dylib/GEOResourceManifestServerProxyDelegate.h>

@protocol GEOResourceManifestServerProxy;
@class NSHashTable, GEOActiveTileGroup, NSLock, NSDictionary, NSSet, NSMutableArray, GEOLocalizationRegionsInfo, GEOResourceManifestConfiguration, NSString;

@interface GEOResourceManifestManager : NSObject <GEOResourceManifestServerProxyDelegate> {

	id<GEOResourceManifestServerProxy> _serverProxy;
	NSHashTable* _serverProxyObservers;
	GEOActiveTileGroup* _activeTileGroup;
	NSLock* _activeTileGroupLock;
	NSDictionary* _resourceNamesToPaths;
	NSSet* _allResourceNames;
	NSSet* _allRegionalResourceNames;
	BOOL _needsToLoadTileGroupFromDisk;
	NSMutableArray* _tileGroupObservers;
	NSLock* _tileGroupObserversLock;
	NSLock* _closedCountLock;
	long long _closedCount;
	GEOLocalizationRegionsInfo* _localizationRegionsInfo;
	NSMutableArray* _networkActivityHandlers;
	BOOL _isUpdatingManifest;
	BOOL _isLoadingResources;
	NSLock* _resourceNamesToPathsLock;
	GEOResourceManifestConfiguration* _configuration;

}

@property (nonatomic,readonly) id<GEOResourceManifestServerProxy> serverProxy;              //@synthesize serverProxy=_serverProxy - In the implementation block
@property (nonatomic,readonly) BOOL hasActiveTileGroup; 
@property (nonatomic,readonly) GEOActiveTileGroup * activeTileGroup; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)setServerProxyClass:(Class)arg1 ;
+(void)useRemoteProxy;
+(void)useLocalProxy;
+(void)disableServerConnection;
+(void)setHiDPI:(BOOL)arg1 ;
+(id)modernManagerForConfiguration:(id)arg1 ;
+(id)modernManagerForTileGroupIdentifier:(unsigned)arg1 ;
+(id)modernManager;
+(id)sharedManager;
-(void)dealloc;
-(id)init;
-(id)initWithConfiguration:(id)arg1 ;
-(void)_localeChanged:(id)arg1 ;
-(id)allResourceNames;
-(id)authToken;
-(GEOActiveTileGroup *)activeTileGroup;
-(void)resetActiveTileGroup;
-(void)startObservingDevResources;
-(unsigned)versionForTileKey:(const GEOTileKey*)arg1 ;
-(id)baseURLStringForTileKey:(const GEOTileKey*)arg1 ;
-(void)getResourceManifestWithHandler:(/*^block*/id)arg1 ;
-(BOOL)isDisputedBordersWhitelistedForTileKey:(const GEOTileKey*)arg1 country:(id)arg2 region:(id)arg3 ;
-(void)devResourcesFolderDidChange;
-(id)languageForTileKey:(const GEOTileKey*)arg1 ;
-(id<GEOResourceManifestServerProxy>)serverProxy;
-(void)updateManifest:(/*^block*/id)arg1 ;
-(oneway void)serverProxyWillStartLoadingResources:(id)arg1 ;
-(void)closeServerConnection;
-(oneway void)serverProxyDidStopUpdatingResourceManifest:(id)arg1 ;
-(int)mapMatchingTileSetStyle;
-(void)setManifestToken:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id)disputedBordersQueryStringForTileKey:(const GEOTileKey*)arg1 country:(id)arg2 region:(id)arg3 ;
-(id)allResourcePaths;
-(void)addServerProxyObserver:(id)arg1 ;
-(id)allRegionalResourceNames;
-(id)_loadActiveTileGroupIfNecessary:(BOOL)arg1 ;
-(void)addNetworkActivityHandler:(/*^block*/id)arg1 ;
-(void)removeServerProxyObserver:(id)arg1 ;
-(void)addTileGroupObserver:(id)arg1 queue:(id)arg2 ;
-(id)pathForResourceWithName:(id)arg1 ;
-(void)stopObservingDevResources;
-(BOOL)isAvailableForTileKey:(const GEOTileKey*)arg1 ;
-(BOOL)hasResourceManifest;
-(unsigned)mapMatchingZoomLevel;
-(void)removeTileGroupObserver:(id)arg1 ;
-(double)timeToLiveForTileKey:(const GEOTileKey*)arg1 ;
-(id)_activeTileSetForKey:(const GEOTileKey*)arg1 ;
-(void)openServerConnection;
-(id)detailedDescription;
-(void)setActiveTileGroupIdentifier:(unsigned)arg1 ;
-(void)_buildResourceNamesToPaths;
-(BOOL)supportsTileStyle:(int)arg1 size:(int)arg2 scale:(int)arg3 ;
-(void)updateManifestIfNecessary:(/*^block*/id)arg1 ;
-(BOOL)hasActiveTileGroup;
-(oneway void)serverProxy:(id)arg1 didChangeActiveTileGroup:(id)arg2 finishedCallback:(/*^block*/id)arg3 ;
-(void)forceUpdate;
-(id)localizationURLStringIfNecessaryForTileKey:(const GEOTileKey*)arg1 overrideLocale:(id)arg2 ;
-(oneway void)serverProxyWillStartUpdatingResourceManifest:(id)arg1 ;
-(id)languageForTileKey:(const GEOTileKey*)arg1 overrideLocale:(id)arg2 ;
-(void)_notifyObserversOfResourcesChange;
-(oneway void)serverProxyDidStopLoadingResources:(id)arg1 ;
-(unsigned)activeTileGroupIdentifier;
@end

