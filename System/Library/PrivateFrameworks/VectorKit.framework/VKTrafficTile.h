/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:57:00 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorTile.h>

@class NSData, VKTileKeyMap, NSMutableArray, NSArray;

@interface VKTrafficTile : VKVectorTile {

	unique_ptr<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::PilledTrafficRibbonDescriptor> > >* _pilledTrafficLayer;
	unique_ptr<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor>, std::__1::default_delete<vk::TrafficLayer<ggl::SolidTrafficRibbonDescriptor> > >* _solidTrafficLayer;
	GEOTileKey _dataKey;
	NSData* _data;
	VKTileKeyMap* _dynamicTiles;
	unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::TrafficRibbon, std::__1::default_delete<vk::TrafficRibbon> > > > > > >* _pilledTrafficCollection;
	unordered_map<vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > >, std::__1::hash<vk::TrafficBatchKey>, std::__1::equal_to<vk::TrafficBatchKey>, std::__1::allocator<std::__1::pair<const vk::TrafficBatchKey, std::__1::vector<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> >, std::__1::allocator<std::__1::unique_ptr<vk::SolidTrafficRibbon, std::__1::default_delete<vk::SolidTrafficRibbon> > > > > > >* _solidTrafficCollection;
	NSMutableArray* _incidents;
	TrafficSkeletonTile* _trafficData;
	TrafficMeshStyle _builtTrafficStyle;
	FeatureAttributeSet* _styleAttributes;

}

@property (assign,nonatomic) const GEOTileKey* dataKey; 
@property (nonatomic,readonly) NSArray * incidents;                                                               //@synthesize incidents=_incidents - In the implementation block
@property (nonatomic,readonly) VKTileKeyMap * dynamicTiles;                                                       //@synthesize dynamicTiles=_dynamicTiles - In the implementation block
@property (nonatomic,readonly) TrafficLayer<ggl::PilledTrafficRibbonDescriptor>* pilledTrafficLayer; 
@property (nonatomic,readonly) TrafficLayer<ggl::SolidTrafficRibbonDescriptor>* solidTrafficLayer; 
@property (nonatomic,readonly) FeatureAttributeSet* styleAttributes;                                              //@synthesize styleAttributes=_styleAttributes - In the implementation block
-(void)dealloc;
-(FeatureAttributeSet*)styleAttributes;
-(NSArray *)incidents;
-(TrafficLayer<ggl::PilledTrafficRibbonDescriptor>*)pilledTrafficLayer;
-(const TrafficMeshStyle*)builtTrafficStyle;
-(void)buildTrafficMeshWithRoadData:(id)arg1 withLoader:(Loader*)arg2 trafficMeshStyle:(const TrafficMeshStyle*)arg3 ;
-(TrafficLayer<ggl::SolidTrafficRibbonDescriptor>*)solidTrafficLayer;
-(void)buildIncidentsForDynamic:(id)arg1 withRoadData:(id)arg2 ;
-(const GEOTileKey*)dataKey;
-(BOOL)_buildStartOffset:(float*)arg1 endOffset:(float*)arg2 forLine:(SCD_Struct_VK321*)arg3 forSkeleton:(const Record*)arg4 forRange:(NSRange)arg5 forFlow:(const Flow*)arg6 forPoints:(Matrix<float, 2, 1>*)arg7 ;
-(void)buildTrafficMeshWithRoadData:(id)arg1 dynamicTile:(id)arg2 trafficAccum:(TrafficAccum*)arg3 styleSession:(StyleResolutionSession<geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >*)arg4 trafficMeshStyle:(const TrafficMeshStyle*)arg5 ;
-(void)setDataKey:(const GEOTileKey*)arg1 ;
-(void)enumerateTrafficRoadPiecesForTile:(id)arg1 usingFunction:(const function<void (const vk::RoadPiece &)>*)arg2 ;
-(VKTileKeyMap *)dynamicTiles;
-(void)buildSkeletonMap;
-(id)initWithKey:(const VKTileKey*)arg1 downloadKey:(const GEOTileKey*)arg2 data:(id)arg3 styleManager:(shared_ptr<gss::StyleManager>*)arg4 sharedResources:(id)arg5 contentScale:(double)arg6 device:(Device*)arg7 ;
-(void)buildTrafficIncidentsWithRoadData:(id)arg1 ;
-(void)setupStyleAttributesWithRoadData:(id)arg1 ;
@end

