/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:57:00 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorMapModel.h>
#import <libobjc.A.dylib/VKMercatorTerrainHeightProvider.h>
#import <libobjc.A.dylib/VKMapLayer.h>

@protocol VKBuildingFootprintMapModelDelegate;
@class VKTimedAnimation, VKSkyModel, VK3DObjectSubMapModel, VKMercatorTerrainHeightCache, NSString;

@interface VKBuildingFootprintMapModel : VKVectorMapModel <VKMercatorTerrainHeightProvider, VKMapLayer> {

	float _brightness;
	long long _vectorType;
	int _buildingMode;
	VKTimedAnimation* _styleChangeAnimation;
	VKTimedAnimation* _fadeBuildingAnimation;
	BOOL _fadeTiles;
	VKSkyModel* _skyModel;
	unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > >* _currentOccluders;
	unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > >* _previousOccluders;
	RenderItemBatcher* _batcher;
	float _minLayeringHeight;
	float _maxLayeringHeight;
	BOOL _shouldDraw3DBuildingsInVectorBuildingsRenderPass;
	BOOL _shouldDraw3DBuildingsIn3DBuildingsRenderPass;
	BOOL _initializedStyles;
	id<VKBuildingFootprintMapModelDelegate> _delegate;
	int _stencilRef;
	VK3DObjectSubMapModel* _landmarksModel;
	shared_ptr<gss::StyleManager>* _styleManager;
	unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > >* _strokeShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > >* _fillShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > >* _topShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuildingTop::Shader::Setup> > >* _foggedTopShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > >* _stroke3DShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > >* _buildingShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::FoggedBuilding::Shader::Setup> > >* _foggedBuildingShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > >* _pointyRoofShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > >* _shadowShaderSetupPool;
	shared_ptr<ggl::RenderState>* _strokeRenderState;
	shared_ptr<ggl::RenderState>* _fillRenderState;
	shared_ptr<ggl::RenderState>* _fillRenderStateWithBlending;
	shared_ptr<ggl::RenderState>* _threeDRenderStateWithoutBlending;
	shared_ptr<ggl::RenderState>* _threeDRenderStateWithBlending;
	shared_ptr<ggl::RenderState>* _threeDStrokeRenderState;
	shared_ptr<ggl::RenderState>* _shadowsRenderState;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _stroke3DRenderItemPool;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _buildingRenderItemPool;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _shadowRenderItemPool;
	BOOL _supportsStrokes;
	BOOL _supports3DStrokes;
	BOOL _supportsBuildingShadows;
	BOOL _supports3DBuildings;
	VKMercatorTerrainHeightCache* _heightCache;

}

@property (assign,nonatomic) shared_ptr<gss::StyleManager>* styleManager; 
@property (nonatomic,readonly) VKMercatorTerrainHeightCache * heightCache;                  //@synthesize heightCache=_heightCache - In the implementation block
@property (assign,nonatomic) long long vectorType;                                          //@synthesize vectorType=_vectorType - In the implementation block
@property (assign,nonatomic) BOOL fadeTiles;                                                //@synthesize fadeTiles=_fadeTiles - In the implementation block
@property (assign,nonatomic) int buildingMode;                                              //@synthesize buildingMode=_buildingMode - In the implementation block
@property (nonatomic,retain) VKSkyModel * skyModel;                                         //@synthesize skyModel=_skyModel - In the implementation block
@property (assign,nonatomic) id<VKBuildingFootprintMapModelDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,retain) VK3DObjectSubMapModel * landmarksModel;                        //@synthesize landmarksModel=_landmarksModel - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)setDelegate:(id<VKBuildingFootprintMapModelDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(id<VKBuildingFootprintMapModelDelegate>)delegate;
-(void)reset;
-(void)setActive:(BOOL)arg1 ;
-(void)didReceiveMemoryWarning:(BOOL)arg1 ;
-(void)setStyleManager:(shared_ptr<gss::StyleManager>*)arg1 ;
-(shared_ptr<gss::StyleManager>*)styleManager;
-(double)heightAtPoint:(VKPoint)arg1 ;
-(void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)reserveStencilRangeForScene:(id)arg1 withContext:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)setVectorType:(long long)arg1 ;
-(void)stylesheetDidChange;
-(unsigned long long)mapLayerPosition;
-(VKMercatorTerrainHeightCache *)heightCache;
-(void)setSkyModel:(VKSkyModel *)arg1 ;
-(void)setFadeTiles:(BOOL)arg1 ;
-(double)maxTileHeightAtPoint:(VKPoint)arg1 ;
-(BOOL)wantsCategorizedSourceTiles;
-(id)featureMarkerInTile:(id)arg1 atPoint:(VKPoint*)arg2 ;
-(void)removePersistingExitingTiles:(id)arg1 ;
-(void)willStartDrawingTiles:(id)arg1 ;
-(void)willStopDrawingTiles:(id)arg1 ;
-(long long)vectorType;
-(void)flushPools;
-(void)generateRenderItemsForBuildingShadowsInScene:(id)arg1 withContext:(id)arg2 commandBuffer:(CommandBuffer*)arg3 ;
-(void)setBuildingMode:(int)arg1 ;
-(void)generate2DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(CommandBuffer*)arg3 ;
-(void)vectorTypeDidChange;
-(void)setLandmarksModel:(VK3DObjectSubMapModel *)arg1 ;
-(void)_clearOccluders;
-(VK3DObjectSubMapModel *)landmarksModel;
-(void)resetPools;
-(void)generate3DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(CommandBuffer*)arg3 ;
-(void)_updateBuildingModeForContext:(id)arg1 ;
-(void)animateTiles:(id)arg1 fromAlpha:(float)arg2 toAlpha:(float)arg3 fromScale:(float)arg4 toScale:(float)arg5 ;
-(void)setBuildingMode:(int)arg1 animated:(BOOL)arg2 ;
-(BOOL)fadeTiles;
-(void)_updateStyles;
-(void)generate2DBuildingRenderItemsForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(CommandBuffer*)arg3 ;
-(int)buildingMode;
-(void)generate3DBuildingRenderItemsIfNecessaryForScene:(id)arg1 withContext:(id)arg2 commandBuffer:(CommandBuffer*)arg3 ;
-(VKSkyModel *)skyModel;
@end

