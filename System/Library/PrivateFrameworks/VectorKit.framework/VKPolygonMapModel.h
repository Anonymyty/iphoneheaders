/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:57:00 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKVectorMapModel.h>
#import <libobjc.A.dylib/VKStyleManagerObserver.h>

@class VKRouteContext, NSString;

@interface VKPolygonMapModel : VKVectorMapModel <VKStyleManagerObserver> {

	BOOL _drawShapes;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> > >* _strokeShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> > >* _animatableStrokeShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > >* _fillShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> > >* _animatableFillShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > >* _coastlineStencilShaderSetupPool;
	unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> >* _stencilInvertShaderSetup;
	unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> > >* _coastlineShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::GlowAlpha::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::GlowAlpha::Shader::Setup> > >* _glowAlphaShaderSetupPool;
	unique_ptr<ggl::FragmentedPool<ggl::Glow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup> > >* _glowShaderSetupPool;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _polygonRenderStates[32];
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineStencilRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _stencilInvertRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _stencilWaterEraseRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineRenderStateNoStencil;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineRenderState;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowAlphaRenderStateFront;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowRenderStateFront;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowAlphaRenderStateBack;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _coastlineGlowRenderStateBack;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _coastlineStencilRenderItemPool;
	unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >* _stencilInvertRenderItem;
	unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >* _stencilEraseWaterRenderItem;
	unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >* _coastlineRenderItemPool;
	int _belowRoadsSourceTileZtoStencilOffset;
	int _aboveRoadsSourceTileZToStencilOffset;
	int _aboveBuildingsSourceTileZToStencilOffset;
	int _coastlineSourceTileZtoStencilOffset;
	vector<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup> >, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > >, std::__1::allocator<std::__1::pair<std::__1::unique_ptr<ggl::PolygonSolidFill::Shader::Setup, std::__1::default_delete<ggl::PolygonSolidFill::Shader::Setup> >, std::__1::unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > > > >* _coastlineStencilItems;
	shared_ptr<ggl::ConstantDataTyped<ggl::AnimatableTexture::Variant> >* _variantData;
	shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> >* _groundCoverViewConstantData;
	shared_ptr<ggl::ConstantDataTyped<ggl::PolygonFill::Fill> >* _groundCoverPolygonConstantData;
	shared_ptr<ggl::PolygonBase::MeshMesh>* _groundCoverMesh;
	unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> >* _groundCoverShaderSetup;
	unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >* _groundCoverRenderState;
	unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >* _groundCoverRenderItem;
	shared_ptr<gss::StyleQuery>* _groundCoverStyle;
	RenderItemBatcher* _batcher;
	VKRouteContext* _routeContext;
	unordered_map<unsigned long long, vk::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, vk::PolygonRouteAttributes> > >* _transitNodesRouteAttributesMap;
	BOOL _buildingsAre3D;

}

@property (assign,nonatomic) BOOL drawShapes;                                            //@synthesize drawShapes=_drawShapes - In the implementation block
@property (nonatomic,readonly) BOOL shouldEverShowVegetation; 
@property (nonatomic,retain) VKRouteContext * routeContext;                              //@synthesize routeContext=_routeContext - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) shared_ptr<gss::StyleManager>* styleManager; 
-(void)dealloc;
-(id)init;
-(void)reset;
-(void)didReceiveMemoryWarning:(BOOL)arg1 ;
-(void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)stylesheetTransitionDidProgress;
-(void)stylesheetDoneChanging;
-(void)stylesheetDidChange;
-(void)stylesheetWillChange;
-(unsigned long long)mapLayerPosition;
-(void)buildingsDidBecome3D:(BOOL)arg1 ;
-(void)setDrawShapes:(BOOL)arg1 ;
-(BOOL)wantsCategorizedSourceTiles;
-(id)featureMarkerInTile:(id)arg1 atPoint:(VKPoint*)arg2 ;
-(void)willStartDrawingTiles:(id)arg1 ;
-(void)flushPools;
-(void)resetPools;
-(void)updateStylesInTiles:(id)arg1 updateTextures:(BOOL)arg2 ;
-(unsigned char)featureWithQueryPlacement:(const shared_ptr<gss::StyleQuery>*)arg1 ;
-(unsigned long long)textureSize;
-(void)generateCoastlineRenderItemsWithContext:(id)arg1 commandBuffer:(CommandBuffer*)arg2 ;
-(BOOL)drawShapes;
-(void)generateRenderItemsForTransparentPolygonsInScene:(id)arg1 context:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(BOOL)shouldEverShowVegetation;
-(id)waterFeatureAttributes;
-(void)updateGroundCoverStyle;
-(void)generateRenderItemsForOpaquePolygonsInScene:(id)arg1 context:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)generateRenderItemsForScene:(id)arg1 withContext:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(void)generateGroundCoverRenderItemsForScene:(id)arg1 withContext:(id)arg2 renderQueue:(RenderQueue*)arg3 ;
-(Matrix<float, 4, 4>)worldTransformForPolygonGroup:(id)arg1 atZoom:(float)arg2 ;
-(RenderState*)renderStateForFilling:(BOOL)arg1 usingStencilType:(unsigned char)arg2 blendingEnabled:(BOOL)arg3 depthTestingEnabled:(BOOL)arg4 ;
-(VKRouteContext *)routeContext;
-(void)setRouteContext:(VKRouteContext *)arg1 ;
@end

