/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:57:02 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKTileSetBackedTileSource.h>
#import <libobjc.A.dylib/VKTileSourceClient.h>

@class VKTileKeyList, VKTileKeyMap, VKTileSource, VKTrafficDynamicTileSource, VKTileCache, NSString;

@interface VKTrafficTileSource : VKTileSetBackedTileSource <VKTileSourceClient> {

	VKTileKeyList* _building;
	VKTileKeyMap* _pendingTraffic;
	VKTileSource* _roadTileSource;
	VKTrafficDynamicTileSource* _dynamicTileSource;
	VKTileCache* _recentTrafficTiles;
	TrafficMeshStyle _trafficMeshStyle;

}

@property (nonatomic,retain) VKTileSource * roadTileSource;              //@synthesize roadTileSource=_roadTileSource - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)clearCaches;
-(void)dealloc;
-(void)setContentScale:(double)arg1 ;
-(id)tileForKey:(const VKTileKey*)arg1 ;
-(long long)maximumZoomLevel;
-(void)setStyleManager:(shared_ptr<gss::StyleManager>*)arg1 ;
-(void)setSharedResources:(id)arg1 ;
-(id)initWithSkeletonTileSet:(id)arg1 dynamicTileSet:(id)arg2 resourceManifestConfiguration:(id)arg3 locale:(id)arg4 ;
-(void)setRoadTileSource:(VKTileSource *)arg1 ;
-(VKTileSource *)roadTileSource;
-(void)didFailToLoadTileKey:(const GEOTileKey*)arg1 error:(id)arg2 ;
-(BOOL)canFetchTileForKey:(const VKTileKey*)arg1 ;
-(void)invalidateTilesFromTileSource:(id)arg1 ;
-(void)didStopLoadingTilesWithError:(id)arg1 ;
-(void)willStartLoadingTiles;
-(void)populateVisibleTileSets:(id)arg1 withTiles:(id)arg2 ;
-(void)fetchTileForKey:(const VKTileKey*)arg1 ;
-(void)tileSource:(id)arg1 invalidateTilesWithState:(unsigned long long)arg2 ;
-(void)decodeData:(id)arg1 downloadKey:(const GEOTileKey*)arg2 sourceKey:(const VKTileKey*)arg3 ;
-(void)tileSource:(id)arg1 invalidateKeys:(id)arg2 ;
-(void)tileSource:(id)arg1 didFailToDecodeTileForKey:(const VKTileKey*)arg2 ;
-(void)failedToDecodeSourceKey:(const VKTileKey*)arg1 ;
-(BOOL)tileSource:(id)arg1 keyIsNeeded:(const VKTileKey*)arg2 ;
-(void)tileSource:(id)arg1 didFailToLoadTileForKey:(const VKTileKey*)arg2 error:(id)arg3 ;
-(id)tileForData:(id)arg1 downloadKey:(const GEOTileKey*)arg2 sourceKey:(const VKTileKey*)arg3 ;
-(void)tileSource:(id)arg1 didFetchTile:(id)arg2 forKey:(const VKTileKey*)arg3 ;
-(void)fetchedTile:(id)arg1 forKey:(const VKTileKey*)arg2 ;
-(BOOL)tileSourceMayUseNetwork:(id)arg1 ;
-(void)sawTileForKey:(const VKTileKey*)arg1 ;
-(BOOL)canFetchTrafficTileForKey:(const VKTileKey*)arg1 ;
-(void)tileSource:(id)arg1 dirtyTilesWithinRect:(const SCD_Struct_VK11*)arg2 level:(long long)arg3 ;
-(void)_generatedTraffic:(id)arg1 ;
-(void)tileSource:(id)arg1 invalidateKey:(const VKTileKey*)arg2 ;
-(void)dirtyTilesFromTileSource:(id)arg1 ;
-(BOOL)shouldObeyHybridUnavailableRegions;
@end

