/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:16:02 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <identityservicesd/identityservicesd-Structs.h>
#import <identityservicesd/IDSInvitationPushHandlerListener.h>

@protocol IDSLink;
@class NSString, NSSet, NSData, NSMutableDictionary, NSMutableArray, NSDictionary;

@interface IDSDInvitationSession : NSObject <IDSInvitationPushHandlerListener> {

	NSString* _uniqueID;
	NSString* _conferenceID;
	NSSet* _destinations;
	NSData* _remoteBlob;
	id<IDSLink> _idsLink;
	unsigned _sessionID;
	/*^block*/id _completionBlock;
	NSMutableDictionary* _conferenceIDMap;
	NSMutableDictionary* _callTypeMap;
	NSMutableArray* _initiatedConferences;
	NSDictionary* _callerProperties;
	SecKeyRef _privateKey;
	BOOL _privateIdentityLoaded;

}

@property (nonatomic,readonly) NSString * uniqueID;                          //@synthesize uniqueID=_uniqueID - In the implementation block
@property (nonatomic,retain) NSData * remoteBlob;                            //@synthesize remoteBlob=_remoteBlob - In the implementation block
@property (nonatomic,retain) id<IDSLink> idsLink;                            //@synthesize idsLink=_idsLink - In the implementation block
@property (nonatomic,readonly) NSString * conferenceID;                      //@synthesize conferenceID=_conferenceID - In the implementation block
@property (nonatomic,readonly) unsigned sessionID;                           //@synthesize sessionID=_sessionID - In the implementation block
@property (nonatomic,readonly) NSDictionary * callerProperties;              //@synthesize callerProperties=_callerProperties - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)processInitiatePushWithHandler:(id)arg1 sessionInitated:(id)arg2 topic:(id)arg3 myID:(id)arg4 peerID:(id)arg5 peerDisplayID:(id)arg6 peerCN:(id)arg7 peerPushToken:(id)arg8 peerNATType:(id)arg9 peerBlob:(id)arg10 peerNatIP:(id)arg11 clientInfo:(id)arg12 serviceData:(id)arg13 ;
-(void)processAcceptPushWithHandler:(id)arg1 sessionAccepted:(id)arg2 topic:(id)arg3 peerID:(id)arg4 peerCN:(id)arg5 peerPushToken:(id)arg6 peerNATType:(id)arg7 peerBlob:(id)arg8 peerNatIP:(id)arg9 relayType:(id)arg10 relayConnectionID:(id)arg11 relayTransactionIDAlloc:(id)arg12 relayTokenAllocReq:(id)arg13 myRelayIP:(id)arg14 myRelayPort:(id)arg15 peerRelayIP:(id)arg16 peerRelayPort:(id)arg17 clientInfo:(id)arg18 serviceData:(id)arg19 ;
-(void)processRejectPushWithHandler:(id)arg1 sessionRejected:(id)arg2 topic:(id)arg3 peerID:(id)arg4 peerPushToken:(id)arg5 reason:(id)arg6 clientInfo:(id)arg7 serviceData:(id)arg8 ;
-(void)processCancelPushWithHandler:(id)arg1 sessionCancelled:(id)arg2 topic:(id)arg3 peerID:(id)arg4 reason:(id)arg5 clientInfo:(id)arg6 serviceData:(id)arg7 ;
-(void)processSendPushWithHandler:(id)arg1 incomingMessage:(id)arg2 topic:(id)arg3 peerID:(id)arg4 reason:(id)arg5 clientInfo:(id)arg6 serviceData:(id)arg7 ;
-(void)processRelayInitiatePushWithHandler:(id)arg1 relayInitiated:(id)arg2 topic:(id)arg3 peerID:(id)arg4 peerPushToken:(id)arg5 relayType:(id)arg6 relayConnectionID:(id)arg7 relayTransactionIDAlloc:(id)arg8 relayTokenAllocReq:(id)arg9 myRelayIP:(id)arg10 myRelayPort:(id)arg11 peerRelayIP:(id)arg12 peerRelayPort:(id)arg13 clientInfo:(id)arg14 serviceData:(id)arg15 ;
-(void)processRelayUpdatePushWithHandler:(id)arg1 relayUpdated:(id)arg2 topic:(id)arg3 peerID:(id)arg4 peerPushToken:(id)arg5 relayType:(id)arg6 relayConnectionID:(id)arg7 relayTransactionIDChannelBind:(id)arg8 relayTokenChannelBind:(id)arg9 relayBlob:(id)arg10 peerRelayNATIP:(id)arg11 peerRelayNATPort:(id)arg12 clientInfo:(id)arg13 serviceData:(id)arg14 ;
-(void)processRelayCancelPushWithHandler:(id)arg1 relayCancelled:(id)arg2 topic:(id)arg3 peerID:(id)arg4 relayType:(id)arg5 relayTokenAllocReq:(id)arg6 relayConnectionID:(id)arg7 relayTransactionIDAlloc:(id)arg8 myRelayIP:(id)arg9 myRelayPort:(id)arg10 peerRelayIP:(id)arg11 peerRelayPort:(id)arg12 reason:(id)arg13 clientInfo:(id)arg14 serviceData:(id)arg15 ;
-(BOOL)_checkBadPushToken:(id)arg1 ;
-(void)sendInvitation:(id)arg1 ;
-(void)sessionWillBecomeInactive;
-(void)declineInviation;
-(void)processInlineRelayInitiate:(id)arg1 fromPerson:(id)arg2 ;
-(void)processRelayUpdate:(id)arg1 fromPerson:(id)arg2 ;
-(void)endSession;
-(void)acceptInvitation;
-(void)cancelInvitation;
-(id)externalAddressForSelfConnectionBlob:(id)arg1 ;
-(id)_keychainRegistration:(id)arg1 ;
-(BOOL)isDeviceRegistered;
-(id)phoneNumber;
-(id)regionBasePhoneNumber;
-(id)regionServerContext;
-(id)profileID;
-(id)regionID;
-(BOOL)allowedAsChild;
-(id)callerURI;
-(id)topicForCallType:(int)arg1 ;
-(void)_setInitiatedConference:(id)arg1 ;
-(void)_setCallType:(int)arg1 forConferenceID:(id)arg2 ;
-(void)_setConferenceIDMap:(id)arg1 forToken:(id)arg2 ;
-(id)idsAccountForCallType:(int)arg1 ;
-(id)callerCertForCallType:(int)arg1 ;
-(BOOL)_validRegistrationStateToMakeCalls;
-(BOOL)_registrationSupportedForRegistration;
-(SecKeyRef)callerPrivateKey;
-(id)_mappedSessionTokenForConferenceID:(id)arg1 ;
-(int)_callTypeForConferenceID:(id)arg1 ;
-(BOOL)_hasOutgoingInvitationInFlight;
-(BOOL)_validRegistrationStateToAcceptCalls;
-(id)pushToken;
-(id)userID;
-(NSData *)remoteBlob;
-(void)setRemoteBlob:(NSData *)arg1 ;
-(void)setIdsLink:(id<IDSLink>)arg1 ;
-(id<IDSLink>)idsLink;
-(id)initWithAccount:(id)arg1 destinations:(id)arg2 transportType:(long long)arg3 uniqueID:(id)arg4 ;
-(void)dealloc;
-(unsigned)sessionID;
-(NSDictionary *)callerProperties;
-(NSString *)conferenceID;
-(void)requestVCWithPerson:(id)arg1 properties:(id)arg2 conference:(id)arg3 ;
-(void)respondToVCInvitationWithPerson:(id)arg1 properties:(id)arg2 conference:(id)arg3 ;
-(void)cancelVCRequestWithPerson:(id)arg1 properties:(id)arg2 conference:(id)arg3 ;
-(void)sendAVMessageToPerson:(id)arg1 sessionID:(unsigned)arg2 type:(unsigned)arg3 userInfo:(id)arg4 conference:(id)arg5 ;
-(void)relay:(id)arg1 sendInitateRequest:(id)arg2 toPerson:(id)arg3 ;
-(void)relay:(id)arg1 sendUpdate:(id)arg2 toPerson:(id)arg3 ;
-(void)relay:(id)arg1 sendCancel:(id)arg2 toPerson:(id)arg3 ;
-(double)_messageTimeoutTimeForMessage:(id)arg1 ;
-(BOOL)_checkRegistrationAndFailIfNecessaryAction:(long long)arg1 callType:(int)arg2 conferenceID:(id)arg3 withPerson:(id)arg4 properties:(id)arg5 ;
-(BOOL)_checkManagedProfileAndFailIfNecessaryAction:(long long)arg1 callType:(int)arg2 conferenceID:(id)arg3 withPerson:(id)arg4 properties:(id)arg5 ;
-(BOOL)_checkCanSendRequestsAndFailIfNecessaryAction:(long long)arg1 callType:(int)arg2 conferenceID:(id)arg3 withPerson:(id)arg4 properties:(id)arg5 ;
-(BOOL)_checkAliasInfoAndFailIfNecessaryWithAction:(long long)arg1 callType:(int)arg2 conferenceID:(id)arg3 withPerson:(id)arg4 properties:(id)arg5 ;
-(void)_cancelVCRequestWithPerson:(id)arg1 properties:(id)arg2 conference:(id)arg3 pairsToSkip:(id)arg4 reason:(id)arg5 ;
-(BOOL)_checkForBadPeerIDWithAction:(long long)arg1 callType:(int)arg2 conferenceID:(id)arg3 withPerson:(id)arg4 properties:(id)arg5 peerID:(id)arg6 ;
-(BOOL)_checkConferenceIDAndFailIfNecessaryWithAction:(long long)arg1 callType:(int)arg2 conferenceID:(id)arg3 withPerson:(id)arg4 properties:(id)arg5 ;
-(void)_sendRejectToPeerID:(id)arg1 peerToken:(id)arg2 sessionToken:(id)arg3 callType:(int)arg4 reason:(long long)arg5 clientInfo:(id)arg6 ;
-(BOOL)_hasOutgoingRelayInitiateInFlight;
-(void)_cancelOtherInvitesForPeerID:(id)arg1 skipPairs:(id)arg2 properties:(id)arg3 conference:(id)arg4 reason:(id)arg5 ;
-(NSString *)uniqueID;
@end

