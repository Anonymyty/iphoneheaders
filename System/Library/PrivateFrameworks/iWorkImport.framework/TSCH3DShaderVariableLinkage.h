/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:59:45 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <iWorkImport/iWorkImport-Structs.h>
@class TSCH3DShaderVariable, NSMutableSet;

@interface TSCH3DShaderVariableLinkage : NSObject {

	TSCH3DShaderVariable* mVariable;
	TSCH3DShaderType mLinked;
	TSCH3DShaderVariableScopes mScope;
	TSCH3DShaderVariableScopes mDeclaredScope;
	BOOL mIsUsed;
	NSMutableSet* mDependees;

}

@property (nonatomic,readonly) TSCH3DShaderVariable * variable; 
@property (nonatomic,readonly) NSMutableSet * dependees; 
@property (nonatomic,readonly) TSCH3DShaderType shaderType; 
@property (nonatomic,readonly) TSCH3DShaderType linked; 
@property (nonatomic,readonly) TSCH3DShaderVariableScopes scope; 
@property (nonatomic,readonly) BOOL isLinked; 
@property (nonatomic,readonly) BOOL notLinked; 
@property (nonatomic,readonly) TSCH3DShaderVariableScopes declaredScope; 
@property (assign,nonatomic) BOOL isUsed; 
@property (nonatomic,readonly) BOOL isSpecial; 
@property (nonatomic,readonly) BOOL isUniform; 
@property (nonatomic,readonly) BOOL hasAttribute; 
@property (nonatomic,readonly) BOOL isAttribute; 
@property (nonatomic,readonly) BOOL isVertexVarying; 
@property (nonatomic,readonly) BOOL isFragment; 
@property (nonatomic,readonly) BOOL hasFragment; 
@property (nonatomic,readonly) BOOL canHaveFragment; 
@property (nonatomic,readonly) BOOL isVertex; 
@property (nonatomic,readonly) BOOL hasVertex; 
@property (nonatomic,readonly) BOOL scopeHasFragment; 
@property (nonatomic,readonly) BOOL scopedInAll; 
@property (nonatomic,readonly) BOOL isFragmentLinkable; 
@property (nonatomic,readonly) BOOL isVertexLinkable; 
@property (nonatomic,readonly) unsigned long long hasGlobal; 
+(id)linkageWithVariable:(id)arg1 ;
-(TSCH3DShaderType)shaderType;
-(BOOL)isSpecial;
-(id)initWithVariable:(id)arg1 ;
-(id)nameForShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(id)variableQualifiersWithStorageQualifier:(id)arg1 ;
-(BOOL)isVarying:(TSCH3DShaderType)arg1 ;
-(BOOL)isUniform;
-(BOOL)isVertexVarying;
-(BOOL)scopeHasFragment;
-(void)addShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(BOOL)notLinked;
-(BOOL)hasFragment;
-(BOOL)isVertex;
-(BOOL)hasVertex;
-(BOOL)isGlobalScope:(TSCH3DShaderVariableScopeType)arg1 ;
-(unsigned long long)hasGlobal;
-(BOOL)hasShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(id)resolveGlobalNameForShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 defaultTo:(id)arg3 ;
-(id)variableDeclarationInShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(NSMutableSet *)dependees;
-(BOOL)hasAttribute;
-(BOOL)hasVarying;
-(BOOL)hasBody:(TSCH3DShaderType)arg1 ;
-(BOOL)scopedInAll;
-(BOOL)updateShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)removeShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)setShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)addBodyScope:(TSCH3DShaderType)arg1 ;
-(void)unlink;
-(void)addLinkage:(TSCH3DShaderType)arg1 ;
-(BOOL)updateLinkage:(TSCH3DShaderType)arg1 ;
-(void)removeLinkage:(TSCH3DShaderType)arg1 ;
-(BOOL)hasLinkage:(TSCH3DShaderType)arg1 ;
-(void)setLinkage:(TSCH3DShaderType)arg1 ;
-(BOOL)canHaveFragment;
-(BOOL)isFragmentLinkable;
-(BOOL)isVertexLinkable;
-(id)globalNameForShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)addDeclaredShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(TSCH3DShaderType)linked;
-(TSCH3DShaderVariableScopes)declaredScope;
-(BOOL)isAttribute;
-(BOOL)isLinked;
-(void)dealloc;
-(id)description;
-(TSCH3DShaderVariableScopes)scope;
-(TSCH3DShaderVariable *)variable;
-(BOOL)isUsed;
-(void)setIsUsed:(BOOL)arg1 ;
-(BOOL)isFragment;
@end

