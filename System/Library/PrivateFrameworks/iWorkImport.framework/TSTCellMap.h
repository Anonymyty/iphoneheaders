/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:59:53 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSPObject.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSMutableArray, TSTCellUIDList;

@interface TSTCellMap : TSPObject <NSCopying> {

	vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> >* _cellIDs;
	NSMutableArray* _mergeActions;
	BOOL _appliesToHidden;
	BOOL _mayModifyFormulasInCells;
	BOOL _mayModifyValuesReferencedByFormulas;
	BOOL _uidBased;
	BOOL _oneToMany;
	TSTCellUIDList* _cellUIDs;
	NSMutableArray* _cellLists;
	unordered_map<TSUColumnRowCoordinate, TSTCell *, std::__1::hash<TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSTCell *> > >* _searchableIDMap;
	unordered_map<TSTCellUID, TSTCell *, std::__1::hash<TSTCellUID>, std::__1::equal_to<TSTCellUID>, std::__1::allocator<std::__1::pair<const TSTCellUID, TSTCell *> > >* _searchableUIDMap;

}

@property (assign,getter=isUIDBased,nonatomic) BOOL uidBased;                                    //@synthesize uidBased=_uidBased - In the implementation block
@property (assign,nonatomic) BOOL mayModifyFormulasInCells;                                      //@synthesize mayModifyFormulasInCells=_mayModifyFormulasInCells - In the implementation block
@property (assign,nonatomic) BOOL mayModifyValuesReferencedByFormulas;                           //@synthesize mayModifyValuesReferencedByFormulas=_mayModifyValuesReferencedByFormulas - In the implementation block
@property (assign,nonatomic) BOOL appliesToHidden;                                               //@synthesize appliesToHidden=_appliesToHidden - In the implementation block
@property (nonatomic,retain) TSTCellUIDList * cellUIDs;                                          //@synthesize cellUIDs=_cellUIDs - In the implementation block
@property (nonatomic,retain) NSMutableArray * cellLists;                                         //@synthesize cellLists=_cellLists - In the implementation block
@property (assign,nonatomic) unordered_map<TSUColumnRowCoordinate* searchableIDMap;              //@synthesize searchableIDMap=_searchableIDMap - In the implementation block
@property (assign,nonatomic) unordered_map<TSTCellUID* searchableUIDMap;                         //@synthesize searchableUIDMap=_searchableUIDMap - In the implementation block
@property (getter=isOneToMany,nonatomic,readonly) BOOL oneToMany;                                //@synthesize oneToMany=_oneToMany - In the implementation block
+(id)uuidBasedCellMapWithContext:(id)arg1 ;
+(id)cellMapWithContext:(id)arg1 ;
-(id)initFromUnarchiver:(id)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(void)addCell:(id)arg1 andCellID:(SCD_Struct_TS315)arg2 ;
-(BOOL)isUIDBased;
-(void)enumerateCellsWithIDsUsingBlock:(/*^block*/id)arg1 ;
-(id)initWithContext:(id)arg1 uidBased:(BOOL)arg2 ;
-(void)addCell:(id)arg1 andCellUID:(const TSTCellUID*)arg2 ;
-(void)addMergeAction:(id)arg1 ;
-(BOOL)containsMergeChanges;
-(id)iterator;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDs;
-(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDs;
-(BOOL)mayModifyFormulasInCells;
-(BOOL)mayModifyValuesReferencedByFormulas;
-(id)p_addCell:(id)arg1 ;
-(unsigned long long)p_cellCount;
-(NSMutableArray *)cellLists;
-(void)setCellLists:(NSMutableArray *)arg1 ;
-(void)setUidBased:(BOOL)arg1 ;
-(TSTCellUIDList *)cellUIDs;
-(void)setCellUIDs:(TSTCellUIDList *)arg1 ;
-(BOOL)appliesToHidden;
-(void)setAppliesToHidden:(BOOL)arg1 ;
-(void)setMayModifyFormulasInCells:(BOOL)arg1 ;
-(void)setMayModifyValuesReferencedByFormulas:(BOOL)arg1 ;
-(BOOL)isOneToMany;
-(id)p_cellAtIndex:(unsigned long long)arg1 inCellListArray:(id)arg2 ;
-(void)enumerateCellsWithUIDsUsingBlock:(/*^block*/id)arg1 ;
-(id)mergeActions;
-(void)popLastCell;
-(void)remapUIDsByColumnMap:(const TSUUuidMap*)arg1 rowMap:(const TSUUuidMap*)arg2 ownerMap:(const TSUUuidMap*)arg3 ;
-(void)p_resolveUUIDsToCellIDsByTableInfo:(id)arg1 ;
-(void)p_resolveCellIDsToUUIDsByTableInfo:(id)arg1 preserveHostCells:(BOOL)arg2 ;
-(id)uuidBasedCellMapByTableInfo:(id)arg1 preserveHostCells:(BOOL)arg2 ;
-(unordered_map<TSUColumnRowCoordinate*)searchableIDMap;
-(void)setSearchableIDMap:(unordered_map<TSUColumnRowCoordinate*)arg1 ;
-(id)initWithContext:(id)arg1 cell:(id)arg2 cellUIDList:(id)arg3 ;
-(id)initWithContext:(id)arg1 cell:(id)arg2 cellIDList:(const vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> >*)arg3 ;
-(SCD_Struct_TS315)cellIDAtIndex:(unsigned long long)arg1 ;
-(const vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> >*)cellIDs;
-(id)findCellForCellID:(SCD_Struct_TS315)arg1 ;
-(id)findCellForCellUID:(const TSTCellUID*)arg1 ;
-(id)changeDescriptorsForTable:(id)arg1 ;
-(void)addHeadMergeAction:(id)arg1 ;
-(void)addMergeActions:(id)arg1 ;
-(void)clearMerges;
-(id)cellIDBasedCellMapByTableInfo:(id)arg1 ;
-(id)uuidBasedCellMapByTableInfo:(id)arg1 ;
-(id)cellMapMaskedByUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 inRows:(BOOL)arg2 ;
-(unordered_map<TSTCellUID*)searchableUIDMap;
-(void)setSearchableUIDMap:(unordered_map<TSTCellUID*)arg1 ;
-(void)dealloc;
-(unsigned long long)count;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)initWithContext:(id)arg1 ;
-(id)cellAtIndex:(unsigned long long)arg1 ;
@end

