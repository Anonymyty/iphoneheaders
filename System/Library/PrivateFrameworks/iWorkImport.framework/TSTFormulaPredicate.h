/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:59:55 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSString, NSDate;

@interface TSTFormulaPredicate : NSObject <NSCopying> {

	TSCEFormula* mFormula;
	int mPredicateType;
	int mQualifier1;
	int mQualifier2;
	int mArgIndex0;
	int mArgIndex1;
	int mArgIndex2;
	BOOL mParamsAreDone;
	unsigned char mNodeTag0;
	unsigned char mNodeTag1;
	unsigned char mNodeTag2;
	double mNumberParam1;
	double mNumberParam2;
	NSString* mStringParam1;
	NSDate* mDateTimeParam1;
	NSDate* mDateTimeParam2;
	TSCENumberValue* mDurationParam1;
	TSCENumberValue* mDurationParam2;
	TSCEASTNodeCrossTableCellReference mCrossTableRefParam0;
	TSCEASTNodeCrossTableCellReference mCrossTableRefParam1;
	TSCEASTNodeCrossTableCellReference mCrossTableRefParam2;
	TSCEASTNodeCrossTableRowReference mCrossTableRowRefParam0;
	TSCEASTNodeCrossTableRowReference mCrossTableRowRefParam1;
	TSCEASTNodeCrossTableRowReference mCrossTableRowRefParam2;
	TSCEASTNodeCrossTableColumnReference mCrossTableColumnRefParam0;
	TSCEASTNodeCrossTableColumnReference mCrossTableColumnRefParam1;
	TSCEASTNodeCrossTableColumnReference mCrossTableColumnRefParam2;
	SCD_Struct_TS621* mPredicateArgs[2];

}
+(BOOL)isThresholdNeededForType:(int)arg1 ;
-(id)initFromArchive:(const FormulaPredicateArchive*)arg1 ;
-(void)encodeToArchive:(FormulaPredicateArchive*)arg1 archiver:(id)arg2 ;
-(id)copyByRemappingOwnerUIDsWithMap:(const TSUUuidMap*)arg1 calcEngine:(id)arg2 error:(BOOL*)arg3 ;
-(BOOL)containsUidReferences;
-(double)numberParam1;
-(int)predicateType;
-(int)qualifier1;
-(id)initWithLiteralTextType:(int)arg1 string:(id)arg2 argumentCellReference:(SCD_Struct_TS319*)arg3 hostCell:(SCD_Struct_TS315)arg4 ;
-(id)initWithLiteralDateType:(int)arg1 date1:(id)arg2 date2:(id)arg3 number1:(double)arg4 number2:(double)arg5 qualifier1:(int)arg6 qualifier2:(int)arg7 argumentCellReference:(SCD_Struct_TS319*)arg8 hostCell:(SCD_Struct_TS315)arg9 ;
-(id)initWithLiteralDurationType:(int)arg1 duration1:(TSTDurationWrapper)arg2 duration2:(TSTDurationWrapper)arg3 qualifier:(int)arg4 argumentCellReference:(SCD_Struct_TS319*)arg5 hostCell:(SCD_Struct_TS315)arg6 ;
-(id)initWithLiteralNumberType:(int)arg1 number1:(double)arg2 number2:(double)arg3 qualifier:(int)arg4 argumentCellReference:(SCD_Struct_TS319*)arg5 hostCell:(SCD_Struct_TS315)arg6 ;
-(id)copyToUidFormForHiddenRowsWithTableModel:(id)arg1 ;
-(id)copyToGeometricFormForHiddenRowsWithTableModel:(id)arg1 containsBadRef:(BOOL*)arg2 ;
-(BOOL)evaluateAtCellID:(SCD_Struct_TS315)arg1 inFormulaOwner:(CFUUIDRef)arg2 calculationEngine:(id)arg3 ;
-(id)stringParam1;
-(id)dateTimeParam1;
-(TSCENumberValue*)durationParam1;
-(void)p_clearDerivedVariables;
-(BOOL)p_isEqualForNonFormulaItems:(id)arg1 ;
-(SCD_Struct_TS622*)predicateArg1atHostCoordinate:(SCD_Struct_TS315)arg1 ;
-(BOOL)p_predicateArg:(SCD_Struct_TS622*)arg1 isEqual:(SCD_Struct_TS622*)arg2 ;
-(SCD_Struct_TS622*)predicateArg2atHostCoordinate:(SCD_Struct_TS315)arg1 ;
-(TSCEFormulaCreator)p_creatorForPeriodBoundaryWithScale:(int)arg1 direction:(int)arg2 offset:(SCD_Struct_TS622*)arg3 argIndex:(unsigned)arg4 earlierBound:(BOOL)arg5 isCalPers:(BOOL)arg6 hostCell:(SCD_Struct_TS315)arg7 ;
-(id)initWithPredicateType:(int)arg1 arg1:(SCD_Struct_TS622*)arg2 arg2:(SCD_Struct_TS622*)arg3 qualifier1:(int)arg4 qualifier2:(int)arg5 argumentCellReference:(SCD_Struct_TS319*)arg6 hostCell:(SCD_Struct_TS315)arg7 forConditionalStyle:(BOOL)arg8 ;
-(id)initWithLiteralDateType:(int)arg1 date1:(id)arg2 date2:(id)arg3 number1:(double)arg4 number2:(double)arg5 qualifier1:(int)arg6 qualifier2:(int)arg7 argumentCellReference:(SCD_Struct_TS319*)arg8 hostCell:(SCD_Struct_TS315)arg9 forConditionalStyle:(BOOL)arg10 ;
-(id)initWithPredicateType:(int)arg1 arg1:(SCD_Struct_TS622*)arg2 arg2:(SCD_Struct_TS622*)arg3 qualifier1:(int)arg4 qualifier2:(int)arg5 argumentCellReference:(SCD_Struct_TS319*)arg6 hostCell:(SCD_Struct_TS315)arg7 ;
-(void)p_setPredicateType:(int)arg1 ;
-(void)p_setQualifier1:(int)arg1 ;
-(void)p_setQualifier2:(int)arg1 ;
-(void)p_setParamIndex0:(int)arg1 ;
-(void)p_setParamIndex1:(int)arg1 ;
-(void)p_setParamIndex2:(int)arg1 ;
-(id)copyToUidFormWithCalcEngine:(id)arg1 tableID:(CFUUIDRef)arg2 containingCell:(SCD_Struct_TS315)arg3 preserveHostCell:(BOOL)arg4 ;
-(id)copyToGeometricFormWithCalcEngine:(id)arg1 tableID:(CFUUIDRef)arg2 containingCell:(SCD_Struct_TS315)arg3 containsBadRef:(BOOL*)arg4 ;
-(const TSCEASTNodeCrossTableCellReference*)crossTableRefParam0;
-(const TSCEASTNodeCrossTableCellReference*)crossTableRefParam1;
-(const TSCEASTNodeCrossTableCellReference*)crossTableRefParam2;
-(unsigned char)nodeTag0;
-(int)p_argTypeForNodeTag:(unsigned char)arg1 argNum:(unsigned long long)arg2 calculationEngine:(id)arg3 hostCell:(SCD_Struct_TS315)arg4 ;
-(unsigned char)nodeTag1;
-(unsigned char)nodeTag2;
-(BOOL)p_testDataTypesForArg0:(int)arg1 arg1:(int)arg2 arg2:(int)arg3 predShouldReturn:(BOOL*)arg4 ;
-(void)p_populateMembersFromFormula;
-(int)qualifier2;
-(BOOL)isEqualForInspector:(id)arg1 atHostCoordinate:(SCD_Struct_TS315)arg2 ;
-(id)copyToUidFormForConditionalStylesWithTableModel:(id)arg1 containingCell:(SCD_Struct_TS315)arg2 preserveHostCell:(BOOL)arg3 ;
-(id)copyToGeometricFormForConditionalStylesWithTableModel:(id)arg1 containingCell:(SCD_Struct_TS315)arg2 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withDouble:(double)arg3 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withString:(id)arg3 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withDate:(id)arg3 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withDurationValue:(double)arg3 withUnit:(int)arg4 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withCellRef:(TSCEASTNodeCrossTableCellReference)arg3 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withColumnRef:(TSCEASTNodeCrossTableColumnReference)arg3 ;
-(void)p_setArgumentAt:(long long)arg1 nodeTag:(unsigned char)arg2 withRowRef:(TSCEASTNodeCrossTableRowReference)arg3 ;
-(double)numberParam2;
-(id)dateTimeParam2;
-(TSCENumberValue*)durationParam2;
-(const TSCEASTNodeCrossTableColumnReference*)crossTableColumnRefParam0;
-(const TSCEASTNodeCrossTableColumnReference*)crossTableColumnRefParam1;
-(const TSCEASTNodeCrossTableColumnReference*)crossTableColumnRefParam2;
-(const TSCEASTNodeCrossTableRowReference*)crossTableRowRefParam0;
-(const TSCEASTNodeCrossTableRowReference*)crossTableRowRefParam1;
-(const TSCEASTNodeCrossTableRowReference*)crossTableRowRefParam2;
-(id)copyByRewritingWithSpec:(id)arg1 inOwner:(id)arg2 inCellCoordinate:(SCD_Struct_TS315)arg3 ;
-(id)copyByOffsettingRelativeReferencesWithColumnOffset:(short)arg1 rowOffset:(int)arg2 ;
-(id)copyByUpdatingLinkedTable:(const UUIDData<TSP::UUIDData>*)arg1 hostCell:(SCD_Struct_TS315)arg2 ;
-(void)dealloc;
-(id)init;
-(BOOL)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)copyWithZone:(NSZone*)arg1 ;
-(TSCEFormula*)formula;
-(void)setFormula:(const TSCEFormula*)arg1 ;
@end

