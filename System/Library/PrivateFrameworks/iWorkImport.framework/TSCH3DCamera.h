/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:59:46 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@class TSCH3DLens;

@interface TSCH3DCamera : NSObject <NSCopying> {

	TSCH3DLens* mLens;
	float mViewportScale;
	float mViewportSamples;
	box<glm::detail::tvec2<int> > mViewport;
	tvec2<float> mContainingViewportOffset;
	tmat4x4<float> mTransform;

}

@property (nonatomic,retain) TSCH3DLens * lens; 
@property (nonatomic,readonly) tvec3<float> position; 
@property (nonatomic,readonly) tvec3<float> direction; 
@property (assign,nonatomic) tmat4x4<float> transform; 
@property (nonatomic,readonly) tmat4x4<float> space; 
@property (nonatomic,readonly) tmat4x4<float> projection; 
@property (nonatomic,readonly) tmat4x4<float> normalizedProjection; 
@property (nonatomic,readonly) tmat4x4<float> viewportProjection; 
@property (nonatomic,readonly) tmat4x4<float> modelViewProjection; 
@property (nonatomic,readonly) tmat4x4<float> modelViewNormalizedProjection; 
@property (assign,nonatomic) float viewportScale; 
@property (assign,nonatomic) float viewportSamples; 
@property (assign,nonatomic) box<glm::detail::tvec2<int> > viewport; 
@property (assign,nonatomic) tvec2<float> containingViewportOffset; 
+(id)orthographicWithSize:(tvec2<int>*)arg1 ;
+(id)orthographicPerPixelWithBounds:(box<glm::detail::tvec2<int> >*)arg1 ;
+(id)perspectiveWithSize:(tvec2<int>*)arg1 ;
+(id)cameraWithLens:(id)arg1 size:(tvec2<int>*)arg2 ;
+(id)orthographicPerPixelWithSize:(tvec2<int>*)arg1 ;
+(id)orthographic;
+(id)perspective;
-(tmat4x4<float>)projection;
-(TSCH3DLens *)lens;
-(tmat4x4<float>)normalizedProjection;
-(tvec3<float>)backProjectCameraSpacePoint:(const tvec3<float>*)arg1 ;
-(tmat4x4<float>)modelViewNormalizedProjection;
-(void)setContainingViewportSize:(const tvec2<int>*)arg1 ;
-(float)viewportSamples;
-(tmat4x4<float>)modelViewViewportProjectionWithViewportScale:(float)arg1 ;
-(float)viewportScale;
-(tvec2<float>)containingViewportOffset;
-(void)calculateCullingPlanes:(vector<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> >, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > > >*)arg1 ;
-(id)narrowByNormalizedBounds:(box<glm::detail::tvec2<float> >*)arg1 ;
-(id)narrowedByNormalizedBounds:(box<glm::detail::tvec2<float> >*)arg1 ;
-(id)matrixDescription;
-(id)initWithLens:(id)arg1 size:(tvec2<int>*)arg2 ;
-(FrustumSlice)frustumSliceAtDistance:(float)arg1 ;
-(void)setLens:(TSCH3DLens *)arg1 ;
-(id)shiftByPixels:(tvec2<float>*)arg1 ;
-(void)setViewportScale:(float)arg1 ;
-(void)setContainingViewportOffset:(tvec2<float>)arg1 ;
-(void)setViewportSamples:(float)arg1 ;
-(tvec3<float>)projectNormalizedPoint:(tvec2<float>*)arg1 planeDistance:(float)arg2 ;
-(tvec3<float>)fastProjectNormalizedPoint:(tvec2<float>*)arg1 planeDistance:(float)arg2 ;
-(tmat4x4<float>)viewportProjection;
-(tmat4x4<float>)modelViewProjection;
-(id)narrowedByViewport:(box<glm::detail::tvec2<int> >*)arg1 ;
-(id)shiftedByPixels:(tvec2<float>*)arg1 ;
-(id)pixelAlignedForScaledViewport:(const box<glm::detail::tvec2<float> >*)arg1 viewportScale:(float)arg2 samples:(float)arg3 correspondingNoramlizedBounds:(const box<glm::detail::tvec2<float> >*)arg4 ;
-(id)narrowedByViewport:(const box<glm::detail::tvec2<int> >*)arg1 samples:(long long)arg2 ;
-(void)dealloc;
-(id)description;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)setTransform:(tmat4x4<float>)arg1 ;
-(void)setPosition:(tvec3<float>)arg1 ;
-(tmat4x4<float>)transform;
-(tvec3<float>)position;
-(void)setDirection:(tvec3<float>)arg1 ;
-(tvec3<float>)direction;
-(void)setViewport:(box<glm::detail::tvec2<int> >)arg1 ;
-(box<glm::detail::tvec2<int> >)viewport;
-(tmat4x4<float>)space;
@end

