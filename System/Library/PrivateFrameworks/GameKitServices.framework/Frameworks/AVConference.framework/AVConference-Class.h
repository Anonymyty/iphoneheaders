/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:45:28 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol AVConferenceDelegate;
#import <AVConference/AVConference-Structs.h>
@class AVConferenceXPCClient, NSObject, NSDictionary, CALayer, NSString, NSTimer;

@interface AVConference : NSObject {

	id weakAVConference;
	AVConferenceXPCClient* connection;
	id opaqueConf;
	BOOL useServer;
	NSObject*<AVConferenceDelegate> delegate;
	NSDictionary* serverBag;
	CALayer* remoteLayerFront;
	CALayer* remoteLayerBack;
	CALayer* remoteSubLayerFront;
	CALayer* remoteSubLayerBack;
	NSString* _connectionTypeString;
	BOOL _isUsingFrontCamera;
	int _localCellTech;
	BOOL shouldDisplayVideoInfoLayer_;
	BOOL shouldDisplayNetworkQualityGraph_;
	NSTimer* networkQualityUpdateTimer_;
	CALayer* networkQualityGraphLayer_;

}

@property (assign) BOOL shouldDisplayNetworkQualityGraph; 
@property (assign) BOOL shouldDisplayVideoInfoLayer; 
@property (retain) NSString * connectionTypeString;                                                                    //@synthesize connectionTypeString=_connectionTypeString - In the implementation block
@property (getter=isUsingViceroyBlobFormat) BOOL useViceroyBlobFormat; 
@property (assign) NSObject*<AVConferenceDelegate> delegate; 
@property (assign,getter=isMicrophoneMuted,nonatomic) BOOL microphoneMuted; 
@property (assign,getter=isInputFrequencyMeteringEnabled,nonatomic) BOOL inputFrequencyMeteringEnabled; 
@property (assign,getter=isOutputFrequencyMeteringEnabled,nonatomic) BOOL outputFrequencyMeteringEnabled; 
@property (assign,getter=isOutputMeteringEnabled,nonatomic) BOOL outputMeteringEnabled; 
@property (assign,getter=isInputMeteringEnabled,nonatomic) BOOL inputMeteringEnabled; 
@property (readonly) float outputMeterLevel; 
@property (readonly) float inputMeterLevel; 
@property (assign,nonatomic) BOOL requiresWifi; 
@property (readonly) int localFrameHeight; 
@property (readonly) int localFrameWidth; 
@property (getter=isSpeakerPhoneEnabled) BOOL enableSpeakerPhone; 
@property (readonly) unsigned natType; 
@property (retain) CALayer * networkQualityGraphLayer; 
@property (retain) NSTimer * networkQualityUpdateTimer; 
+(void)refreshLoggingParameters;
+(void)setAudioSessionProperties:(id)arg1 ;
+(void)startAudioSession;
+(void)startAudioSessionWithCompletionHandler:(/*^block*/id)arg1 ;
+(void)stopAudioSession;
+(BOOL)hasActiveAudioSession;
+(unsigned)doBlockingConnectionCheck:(BOOL)arg1 ;
+(unsigned)doBlockingConnectionCheck;
+(short)addressPointerFromBlob:(id)arg1 ;
+(id)externalAddressForSelfConnectionBlob:(id)arg1 ;
-(void)serverDied;
-(void)registerBlocksForVCNotifications;
-(void)deregisterBlocksForVCNotifications;
-(id)connectionTypeToString:(int)arg1 ;
-(void)drawTextInLayer:(id)arg1 context:(id)arg2 ;
-(void)displayConnectionUIWithLocalCell:(id)arg1 remoteCell:(id)arg2 ;
-(void)resetConnectionUIWithLocalCell:(id)arg1 ;
-(void)updateConnectionUIWithLocalCell:(id)arg1 remoteCell:(id)arg2 ;
-(void)serverReconnected;
-(void)setDelegate:(NSObject*<AVConferenceDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(NSObject*<AVConferenceDelegate>)delegate;
-(BOOL)setActive:(BOOL)arg1 ;
-(float)networkQuality;
-(void)stopListeningForNotifications;
-(void)handleGKSConnectivitySettingsUpdate:(id)arg1 ;
-(void)updateGKSConnectivitySettings;
-(id)initWithClientUUID:(id)arg1 ;
-(void)setConnectionTypeString:(NSString *)arg1 ;
-(void)setShouldDisplayNetworkQualityGraph:(BOOL)arg1 ;
-(BOOL)shouldDisplayNetworkQualityGraph;
-(void)setShouldDisplayVideoInfoLayer:(BOOL)arg1 ;
-(BOOL)shouldDisplayVideoInfoLayer;
-(void)listenForNotifications;
-(long long)initializeNewCallWithDeviceRole:(int)arg1 ;
-(void)setRemoteVideoLayer:(void*)arg1 ;
-(void)setRemoteVideoBackLayer:(void*)arg1 ;
-(void)cleanupSubLayerFront;
-(id)newRandomParticipantID;
-(void)startNetworkQualityUpdateTimer;
-(BOOL)startConnectionWithCallID:(long long)arg1 oldCallID:(long long)arg2 usingInviteData:(id)arg3 isCaller:(BOOL)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(BOOL)arg6 capabilities:(id)arg7 idsSocket:(int)arg8 error:(id*)arg9 ;
-(BOOL)startConnectionWithCallID:(long long)arg1 oldCallID:(long long)arg2 usingInviteData:(id)arg3 isCaller:(BOOL)arg4 relayResponseDict:(id)arg5 didOriginateRelayRequest:(BOOL)arg6 capabilities:(id)arg7 error:(id*)arg8 ;
-(double)networkQualityForCallID:(long long)arg1 ;
-(CALayer *)networkQualityGraphLayer;
-(NSTimer *)networkQualityUpdateTimer;
-(BOOL)updateNetworkQualityGraph;
-(void)setNetworkQualityUpdateTimer:(NSTimer *)arg1 ;
-(NSString *)connectionTypeString;
-(void)insertSubLayerFrontInLayer:(id)arg1 videoSlot:(id)arg2 ;
-(void)setActiveRemoteVideoLayerFront:(BOOL)arg1 ;
-(void)insertFrontInfoSubLayerInLayer:(id)arg1 ;
-(void)setNetworkQualityGraphLayer:(CALayer *)arg1 ;
-(id)localScreenAttributesForVideoAttributes:(id)arg1 ;
-(void)setLocalScreenAttributes:(id)arg1 ;
-(unsigned)doBlockingConnectionCheck;
-(long long)initializeNewCall;
-(void)warmupForCall;
-(BOOL)isUsingViceroyBlobFormat;
-(void)setUseViceroyBlobFormat:(BOOL)arg1 ;
-(void)setSetSessionID:(id)arg1 forCallID:(long long)arg2 ;
-(void)addGKSCallEvent:(id)arg1 sessionID:(id)arg2 ;
-(void)sendARPLData:(id)arg1 toCallID:(long long)arg2 ;
-(void)sendData:(id)arg1 forCallID:(long long)arg2 encrypted:(BOOL)arg3 ;
-(void)inviteDictionaryForCallID:(long long)arg1 remoteInviteDictionary:(id)arg2 nonCellularCandidateTimeout:(double)arg3 block:(/*^block*/id)arg4 queue:(id)arg5 ;
-(id)callMetadataForCallID:(long long)arg1 ;
-(void)setPeerCN:(id)arg1 callID:(long long)arg2 ;
-(void)setSessionID:(id)arg1 callID:(long long)arg2 ;
-(BOOL)requiresWifi;
-(void)setRequiresWifi:(BOOL)arg1 ;
-(id)convertBlobtoOldBlob:(id)arg1 ;
-(id)convertBlobtoNewBlob:(id)arg1 ;
-(BOOL)startConnectionWithCallID:(long long)arg1 usingInviteData:(id)arg2 isCaller:(BOOL)arg3 relayResponseDict:(id)arg4 didOriginateRelayRequest:(BOOL)arg5 capabilities:(id)arg6 idsSocket:(int)arg7 error:(id*)arg8 ;
-(BOOL)startConnectionWithCallID:(long long)arg1 usingInviteData:(id)arg2 isCaller:(BOOL)arg3 relayResponseDict:(id)arg4 didOriginateRelayRequest:(BOOL)arg5 capabilities:(id)arg6 error:(id*)arg7 ;
-(void)stopCallID:(long long)arg1 ;
-(void)remoteCancelledCallID:(long long)arg1 ;
-(void)sendProtobuf:(id)arg1 withType:(long long)arg2 forCallID:(long long)arg3 ;
-(void)setCallReport:(long long)arg1 withReport:(id)arg2 ;
-(long long)lastActiveCallID;
-(void)setLastActiveCallID:(long long)arg1 ;
-(void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2 ;
-(void)processRemoteIPChange:(id)arg1 callID:(long long)arg2 ;
-(BOOL)isOutputMeteringEnabled;
-(void)setOutputMeteringEnabled:(BOOL)arg1 ;
-(BOOL)isInputMeteringEnabled;
-(void)setInputMeteringEnabled:(BOOL)arg1 ;
-(BOOL)isInputFrequencyMeteringEnabled;
-(void)setInputFrequencyMeteringEnabled:(BOOL)arg1 ;
-(BOOL)isOutputFrequencyMeteringEnabled;
-(void)setOutputFrequencyMeteringEnabled:(BOOL)arg1 ;
-(float)outputMeterLevel;
-(BOOL)getIsAudioPaused:(BOOL*)arg1 callID:(long long)arg2 error:(id*)arg3 ;
-(BOOL)getIsVideoPaused:(BOOL*)arg1 callID:(long long)arg2 error:(id*)arg3 ;
-(float)inputMeterLevel;
-(void)setMicrophoneMuted:(BOOL)arg1 ;
-(BOOL)isMicrophoneMuted;
-(id)currentAudioInputDevice;
-(id)currentAudioOutputDevice;
-(BOOL)setAudioInputDevice:(id)arg1 ;
-(BOOL)setAudioOutputDevice:(id)arg1 ;
-(void)stopNetworkQualityUpdateTimer;
-(void*)remoteVideoLayer;
-(void*)remoteVideoBackLayer;
-(double)localFramerateForCallID:(long long)arg1 ;
-(double)localBitrateForCallID:(long long)arg1 ;
-(double)remoteFramerateForCallID:(long long)arg1 ;
-(double)remoteBitrateForCallID:(long long)arg1 ;
-(int)localFrameHeight;
-(int)localFrameWidth;
-(int)remoteFrameHeightForCallID:(long long)arg1 ;
-(int)remoteFrameWidthForCallID:(long long)arg1 ;
-(double)remotePacketLossRateForCallID:(long long)arg1 ;
-(double)localPacketLossRateForCallID:(long long)arg1 ;
-(double)roundTripTimeForCallID:(long long)arg1 ;
-(id)statsForCallID:(long long)arg1 ;
-(void)setEnableSpeakerPhone:(BOOL)arg1 ;
-(BOOL)isSpeakerPhoneEnabled;
-(unsigned)natType;
-(BOOL)setPauseAudio:(BOOL)arg1 callID:(long long)arg2 error:(id*)arg3 ;
-(BOOL)setPauseVideo:(BOOL)arg1 callID:(long long)arg2 error:(id*)arg3 ;
-(void)updateCapabilities:(id)arg1 forCallID:(long long)arg2 ;
-(BOOL)setServerInfo:(id)arg1 ;
-(void)videoConference:(id)arg1 didStartSession:(BOOL)arg2 withCallID:(unsigned)arg3 error:(id)arg4 ;
-(void)videoConference:(id)arg1 didStartSession:(BOOL)arg2 withCallID:(unsigned)arg3 withUserInfo:(id)arg4 error:(id)arg5 ;
-(void)videoConference:(id)arg1 didStopWithCallID:(unsigned)arg2 error:(id)arg3 ;
-(void)videoConference:(id)arg1 withCallID:(long long)arg2 didPauseAudio:(BOOL)arg3 error:(id)arg4 ;
-(void)videoConference:(id)arg1 didStopWithCallID:(unsigned)arg2 error:(id)arg3 callMetadata:(id)arg4 ;
-(void)videoConference:(id)arg1 localIPChange:(id)arg2 withCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 remoteMediaStalled:(BOOL)arg2 callID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 didReceiveFirstRemoteFrameForCallID:(unsigned)arg2 ;
-(void)videoConference:(id)arg1 didRemoteVideoAttributesChange:(id)arg2 forCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 remoteAudioPaused:(BOOL)arg2 callID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 remoteVideoPaused:(BOOL)arg2 callID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 didRemoteScreenAttributesChange:(id)arg2 forCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 updateInputFrequencyLevel:(id)arg2 ;
-(void)videoConference:(id)arg1 updateOutputFrequencyLevel:(id)arg2 ;
-(void)videoConference:(id)arg1 updateInputMeterLevel:(float)arg2 ;
-(void)videoConference:(id)arg1 updateOutputMeterLevel:(float)arg2 ;
-(void)videoConference:(id)arg1 inititiateRelayRequest:(unsigned)arg2 requestDict:(id)arg3 ;
-(void)videoConference:(id)arg1 sendRelayUpdate:(unsigned)arg2 updateDict:(id)arg3 ;
-(void)videoConference:(id)arg1 cancelRelayRequest:(unsigned)arg2 requestDict:(id)arg3 ;
-(void)videoConference:(id)arg1 videoQualityNotificationForCallID:(unsigned)arg2 isDegraded:(BOOL)arg3 isRemote:(BOOL)arg4 ;
-(void)videoConference:(id)arg1 withCallID:(unsigned)arg2 networkHint:(BOOL)arg3 ;
-(void)videoConference:(id)arg1 didReceiveARPLData:(id)arg2 forCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 didReceiveData:(id)arg2 forCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 didChangeLocalVariablesForCallID:(unsigned)arg2 ;
-(void)videoConference:(id)arg1 remoteAudioEnabled:(BOOL)arg2 forCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 localAudioEnabled:(BOOL)arg2 forCallID:(unsigned)arg3 error:(id)arg4 ;
-(void)videoConference:(id)arg1 remoteCallingModeChanged:(unsigned)arg2 forCallID:(unsigned)arg3 ;
-(void)videoConference:(id)arg1 reinitializeCallForCallID:(unsigned)arg2 ;
-(void)videoConference:(id)arg1 closeConnectionForCallID:(long long)arg2 ;
-(void)processRelayRequestResponse:(long long)arg1 responseDict:(id)arg2 didOriginateRequest:(BOOL)arg3 ;
-(void)processRelayUpdate:(long long)arg1 updateDict:(id)arg2 didOriginateRequest:(BOOL)arg3 ;
-(void)processCancelRelayRequest:(long long)arg1 cancelDict:(id)arg2 didOriginateRequest:(BOOL)arg3 ;
-(void)shouldSendBlackFrames:(BOOL)arg1 callID:(long long)arg2 ;
-(void)setConferenceState:(unsigned)arg1 forCallID:(long long)arg2 ;
-(void)setConferenceVisualRectangle:(CGRect)arg1 forCallID:(long long)arg2 ;
-(void)setPeerProtocolVersion:(unsigned)arg1 forCallID:(long long)arg2 ;
@end

