/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:45:29 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <libobjc.A.dylib/LoopbackSocketTunnelDelegate.h>
#import <AVConference/AVTelephonyInterfaceDelegate.h>
#import <libobjc.A.dylib/VCSecureDataChannelDelegate.h>

@protocol VCCallSessionDelegate, OS_dispatch_queue, VideoConferenceRealTimeChannel, OS_dispatch_source, VideoConferenceChannelQualityDelegate;
@class NSObject, VCCallInfo, NSMutableArray, VCAudioPayload, VCAudioTierPicker, VCAudioTier, LoopbackSocketTunnel, VCImageAttributeRules, VCCapabilities, GKRingBuffer, NSDictionary, NSMutableDictionary, NSArray, TCPTunnelClient, LoopbackIDSTunnel, TimingCollection, NSString, VCCallLinkCongestionDetector, NSData, VCSessionMessaging, VCBitrateArbiter, VCJitterBuffer, VideoAttributes, GKInterfaceListener, VCWCMClient, NSCondition, VCTransport, VCSecureDataChannel, NSNumber, AVTelephonyInterface;

@interface VCCallSession : NSObject <LoopbackSocketTunnelDelegate, AVTelephonyInterfaceDelegate, VCSecureDataChannelDelegate> {

	NSObject*<VCCallSessionDelegate> delegate;
	VCCallInfo* localCallInfo;
	VCCallInfo* remoteCallInfo;
	long long packetMultiplexMode;
	tagHANDLE* rtpHandle;
	tagHANDLE* rtpVideo;
	int numEncodedBytes;
	int numBufferBytesAvailable;
	BOOL didUseICE;
	tagCONNRESULT* connectionResult;
	tagCONNRESULT* origConnectionResult;
	tagCONNRESULT* activeConnectionResult;
	long long connectionChangeState;
	NSObject*<OS_dispatch_queue> connectionChangeQueue;
	long long state;
	NSMutableArray* audioPayloads;
	VCAudioPayload* currentAudioPayload;
	VCAudioPayload* currentDTXPayload;
	VCAudioTierPicker* audioTierPicker_AppleCalling;
	VCAudioTierPicker* audioTierPicker_FaceTime;
	VCAudioTier* currentAudioTier;
	VCAudioTier* requestedAudioTier;
	int audioTierChangeRequestCount;
	long long videoPayload;
	long long sampleRate;
	long long samplesPerFrame;
	long long blockSize;
	float blockSeconds;
	tagHANDLE* hSIP;
	BOOL isAudioRunning;
	BOOL isWaitingForICEResult;
	BOOL didSend200OK;
	NSObject*<VideoConferenceRealTimeChannel> rtChannel;
	LoopbackSocketTunnel* tunnel;
	opaque_pthread_mutex_t mutex;
	BOOL useLoopback;
	BOOL receivedSIPInvite;
	VCImageAttributeRules* imageAttributeRules;
	int iRemoteRTPPort;
	int iRemoteRTCPPort;
	VCCapabilities* caps;
	int _deviceRole;
	tagHANDLE* hMediaQueue;
	tagHANDLE* hAFRC;
	GKRingBuffer* ringBuf;
	unsigned lastReceived;
	char* lastInputSampleBuffer;
	char* bundleBuffer;
	int bundledPackets;
	int packetsPerBundle;
	unsigned bundleTimestamp;
	int bundlePayload;
	int canUseSpecialAACBundle;
	int preferredAudioCodec;
	int audioTxBitrate;
	int audioHeaderSize;
	unsigned afrcBitrate;
	unsigned afrcDuplication;
	double audioInterval;
	BOOL useSBR;
	BOOL useControlByte;
	BOOL useUEP;
	NSDictionary* _allPayloadsLocalFeaturesString;
	NSMutableDictionary* featuresListStringDict;
	unsigned char inputMeter;
	BOOL audioIsPaused;
	opaque_pthread_mutex_t pauseLock;
	NSObject*<OS_dispatch_queue> videoQueue;
	NSArray* mutedPeers;
	int bandwidthUpstream;
	int bandwidthDownstream;
	BOOL allowAudioRecording;
	int aacBlockSize;
	BOOL fInitialBandwidthDetection;
	int carrierBitrateCap;
	AudioStreamBasicDescription vpioFormat;
	BOOL allowAudioSwitching;
	BOOL shouldUpdateLastReceivedPacketTimestamp;
	double lastReceivedPacketTimestamp;
	BOOL isRemoteMediaStalled;
	int packetsSinceStall;
	long long relayState;
	BOOL allowsRelay;
	int pendingRelayCount;
	BOOL initialSecondaryRelaySetupDone;
	BOOL requiresWifi;
	BOOL useCompressedConnectionData;
	int natType;
	unsigned lastSentAudioSampleTime;
	NSObject*<OS_dispatch_source> pausedAudioHeartBeat;
	TCPTunnelClient* _tcpTunnelClient;
	LoopbackIDSTunnel* _idsTunnel;
	TimingCollection* perfTimers;
	double packetLossRate;
	double timeLastCheckedNetworkConditions;
	double timeLastKnowGoodNetworkPLR;
	double timeLastKnowGoodNetworkRTT;
	double networkConditionsTimeoutInSeconds;
	NSString* peerCN;
	NSString* sessionID;
	unsigned roundTripTime;
	float packetLateAndMissingRatio;
	float callerPreEmptiveTimeoutInSecs;
	int sampleLogCount;
	double timeSinceLastReportedNoPackets;
	double noRemotePacketsTimeout;
	BOOL didAttemptSIPInvite;
	NSObject*<VideoConferenceChannelQualityDelegate> qualityDelegate;
	opaque_pthread_mutex_t qualityDelegateLock;
	NSObject*<OS_dispatch_queue> qualityQueue;
	NSObject*<OS_dispatch_queue> managerQueue;
	BOOL shouldTimeoutPackets;
	opaque_pthread_mutex_t srtpLock;
	BOOL didPrepareSRTP;
	BOOL useAFRC;
	BOOL isRTCPFBEnabled;
	VCCallLinkCongestionDetector* congestionDetector;
	BOOL shouldSendAudio;
	BOOL isGKVoiceChat;
	void* packetThread;
	int signalStrength;
	int signalRaw;
	int signalGrade;
	BOOL bBWEstOperatingModeInitialized;
	BOOL bBWEstNewBWEstModeEnabled;
	BOOL bBWEstFakeLargeFrameModeEnabled;
	BOOL bBWEstActiveProbingSenderLog;
	CGSize remoteScreenPortraitAspectRatio;
	CGSize remoteScreenLandscapeAspectRatio;
	CGSize remoteExpectedPortraitAspectRatio;
	CGSize remoteExpectedLandscapeAspectRatio;
	BOOL isStarted;
	NSData* srtpKeyBytes;
	BOOL isInitiator;
	BOOL sentClientSuccessfulDidStart;
	double videoThrottlingTimeout;
	unsigned awdCallNonce;
	VCSessionMessaging* messaging;
	BOOL isCurrentNetworkBad;
	BOOL requestedTimeoutRelay;
	unsigned callSessionBitrate;
	NSObject*<OS_dispatch_queue> cellTechQueue;
	NSObject*<OS_dispatch_source> cellTechChangeSource;
	TimingCollection* cameraTimers;
	VCBitrateArbiter* callSessionBitrateArbiter;
	NSObject*<OS_dispatch_source> connectionTimeoutSource;
	unsigned short maxPacketLength;
	BOOL lastAudioStalled;
	double lastTierSwitch;
	BOOL audioTierHysteresis;
	long long initialSentBytes;
	long long initialReceivedBytes;
	VCJitterBuffer* vcJitterBuffer;
	tagHANDLE* hVideoReceiver;
	tagHANDLE* hVideoTransmitter;
	BOOL remoteSupportsVisibleRect;
	BOOL remoteSupportsExpectedAspectRatio;
	BOOL canLocalResizePIP;
	BOOL canRemoteResizePIP;
	BOOL receivedFirstRemoteFrame;
	int fecMode;
	NSObject*<OS_dispatch_source> sessionHealthMonitor;
	VideoAttributes* remoteVideoAttributes;
	double lastVideoQualityNotificationUpdate;
	unsigned remoteFrameWidth;
	unsigned remoteFrameHeight;
	GKInterfaceListener* interfaceListener;
	VCWCMClient* vcWCMClient;
	NSCondition* connectionDataTimeoutCondVar;
	VCTransport* transport;
	OpaqueVTPixelTransferSessionRef hdTransferSession;
	CVPixelBufferPoolRef hdBufferPool;
	CGSize expectedDecodeSize;
	opaqueRTCReportingRef reportingAgent;
	int reportUpdateInterval;
	int reportReportFrequency;
	BOOL enableAFRCDump;
	int operatingMode;
	unsigned receivedAudioBytes;
	unsigned sentAudioBytes;
	unsigned totalTxAudioBytes;
	unsigned estimateTxAudioBytes;
	unsigned audioFrameCounter;
	unsigned silenceFrameCounter;
	unsigned vadSegmentCounter;
	BOOL lastIsTalking;
	double lastVCLogCallbackTime;
	SKEStateOpaqueRef skeState;
	CFDataRef secretKey;
	VCSecureDataChannel* secureDataChannel;
	NSString* basebandCodecType;
	NSNumber* basebandCodecSampleRate;
	BOOL _didSendBasebandCodec;
	AVTelephonyInterface* telephonyInterface;
	double lastUpdateQualityIndicator;
	unsigned dwRTT_ice;
	NSObject*<OS_dispatch_queue> timestampQueue;
	BOOL shouldSendBlackFrame;
	NSObject*<OS_dispatch_source> relaySetupTimer;
	unsigned _peerProtocolVersion;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,copy) NSString * peerCN; 
@property (readonly) VCJitterBuffer * vcJitterBuffer; 
@property (nonatomic,readonly) BOOL isCaller; 
@property (nonatomic,copy) NSString * sessionID; 
@property (assign,nonatomic) BOOL isStarted; 
@property (nonatomic,retain) VCImageAttributeRules * imageAttributeRules; 
@property (assign,nonatomic) BOOL shouldSendAudio; 
@property (assign,nonatomic) unsigned roundTripTime; 
@property (assign,nonatomic) BOOL useAFRC; 
@property (assign,nonatomic) BOOL isRTCPFBEnabled; 
@property (assign,nonatomic) double packetLossRate; 
@property (assign,nonatomic) float packetLateAndMissingRatio; 
@property (readonly) double networkQuality; 
@property (assign,nonatomic) double networkConditionsTimeoutInSeconds; 
@property (assign,nonatomic) int signalStrength; 
@property (assign,nonatomic) int signalRaw; 
@property (assign,nonatomic) int signalGrade; 
@property (assign,nonatomic) unsigned lastSentAudioSampleTime; 
@property (assign,nonatomic) int natType; 
@property (assign,nonatomic) BOOL requiresWifi; 
@property (assign,nonatomic) BOOL useCompressedConnectionData; 
@property (retain) NSObject*<VCCallSessionDelegate> delegate; 
@property (assign) NSObject*<VideoConferenceRealTimeChannel> rtChannel; 
@property (assign) tagHANDLE* rtpHandle; 
@property (assign) int numEncodedBytes; 
@property (assign) int numBufferBytesAvailable; 
@property (assign) tagCONNRESULT* connectionResult; 
@property (assign) tagCONNRESULT* origConnectionResult; 
@property (assign) tagCONNRESULT* activeConnectionResult; 
@property (assign) unsigned short maxPacketLength; 
@property (assign) long long state; 
@property (assign) BOOL didUseICE; 
@property (assign) long long videoPayload; 
@property (assign) long long sampleRate; 
@property (readonly) BOOL isAudioRunning; 
@property (readonly) BOOL isVideoRunning; 
@property (readonly) BOOL videoIsPaused; 
@property (readonly) BOOL audioIsPaused; 
@property (assign) BOOL isGKVoiceChat; 
@property (nonatomic,readonly) VCAudioPayload * currentAudioPayload; 
@property (assign) BOOL isWaitingForICEResult; 
@property (assign) BOOL receivedSIPInvite; 
@property (assign) tagHANDLE* hMediaQueue; 
@property (assign) tagHANDLE* hAFRC; 
@property (nonatomic,retain) GKRingBuffer * ringBuf; 
@property (assign) unsigned lastReceived; 
@property (assign) int bundledPackets; 
@property (assign) int packetsPerBundle; 
@property (assign) int preferredAudioCodec; 
@property (nonatomic,readonly) int audioTxBitrate; 
@property (assign) BOOL useControlByte; 
@property (assign) BOOL useUEP; 
@property (assign) unsigned char inputMeter; 
@property (assign) int bandwidthUpstream; 
@property (assign) int bandwidthDownstream; 
@property (nonatomic,retain) NSArray * mutedPeers; 
@property (assign) NSObject*<VideoConferenceChannelQualityDelegate> qualityDelegate; 
@property (assign) BOOL shouldTimeoutPackets; 
@property (retain) NSData * srtpKeyBytes; 
@property (nonatomic,retain) VideoAttributes * remoteVideoAttributes; 
@property (assign) unsigned remoteFrameWidth; 
@property (assign) unsigned remoteFrameHeight; 
@property (assign,nonatomic) int operatingMode; 
@property (readonly) BOOL isSKEOptimizationEnabled; 
@property (readonly) BOOL isRemoteMediaStalled; 
@property (retain) VCCapabilities * capabilities; 
@property (assign) int deviceRole;                                                                //@synthesize deviceRole=_deviceRole - In the implementation block
@property (assign) int pendingRelayCount; 
@property (assign) BOOL initialSecondaryRelaySetupDone; 
@property (nonatomic,retain) NSNumber * basebandCodecSampleRate; 
@property (nonatomic,copy) NSString * basebandCodecType; 
@property (nonatomic,readonly) int audioTierNetworkBitrate; 
@property (nonatomic,readonly) int audioTierAudioBitrate; 
@property (nonatomic,readonly) int audioTierPacketsPerBundle; 
@property (nonatomic,readonly) int audioTierPayload; 
@property (nonatomic,readonly) NSDictionary * dtxMetrics; 
@property (assign) long long connectionChangeState; 
+(id)keyPathsForValuesAffectingNetworkQuality;
-(id)newRemoteScreenAttributesForOrientation:(int)arg1 ;
-(BOOL)initializeVideoTransmitter:(id*)arg1 encodeRule:(id)arg2 unpausing:(BOOL)arg3 reportingAgent:(opaqueRTCReportingRef)arg4 ;
-(BOOL)initializeVideoReceiver:(id*)arg1 reportingAgent:(opaqueRTCReportingRef)arg2 ;
-(double)sessionReceivingBitrate;
-(double)sessionReceivingFramerate;
-(double)sessionTransmittingBitrate;
-(double)sessionTransmittingFramerate;
-(void)callAlarmsWithRTPTimeStamp:(unsigned)arg1 ;
-(void)processResolutionChangeToVideoRule:(id)arg1 captureRule:(id)arg2 featuresListString:(id)arg3 ;
-(BOOL)onCaptureFrame:(CVBufferRef)arg1 audioTS:(unsigned)arg2 audioHT:(double)arg3 videoHT:(double)arg4 droppedFrames:(int)arg5 cameraBits:(unsigned char)arg6 ;
-(void)processBlackFrame:(CVBufferRef)arg1 ;
-(void)updateVideoQualityNotification:(double)arg1 ;
-(void)onPlayVideo:(CVBufferRef)arg1 frameTime:(SCD_Struct_VC13)arg2 cameraStatusBits:(unsigned char)arg3 ;
-(void)setupTransport;
-(void)setupMessaging;
-(void)setupVideoPauseMessages;
-(void)setupAudioPauseMessages;
-(void)setupCellTechChangeMessages;
-(void)setupAudioPausedHBMessages;
-(void)setupCallingModeMessages;
-(void)setupHandoverCandidateChangeMessage;
-(void)setupPiPStateChangeMessage;
-(void)setupBasebandCodecInfoMessages;
-(void)setupAudioOnOffStateMessages;
-(void)lock;
-(void)unlock;
-(BOOL)setupAudioEncoders;
-(BOOL)allocateBundleBuffer;
-(BOOL)setupAudioCodecWithPayload:(int)arg1 ;
-(id)addAudioPayload:(int)arg1 ;
-(BOOL)choosePayload:(int*)arg1 count:(int)arg2 ;
-(BOOL)setRTPPayloads:(int*)arg1 numPayloads:(int)arg2 withError:(id*)arg3 ;
-(void)startAudioWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)stopPausedHeartbeat;
-(void)startPausedHeartbeat;
-(unsigned)audioRTPID;
-(unsigned)videoRTPID;
-(int)mapPacketMultiplexModeToSIPMode:(long long)arg1 ;
-(BOOL)startVideoSend:(BOOL)arg1 error:(id*)arg2 ;
-(BOOL)stopVideoSend:(BOOL)arg1 error:(id*)arg2 ;
-(BOOL)findFeatureString:(const char*)arg1 value:(char*)arg2 valueLength:(unsigned long long)arg3 withPrefix:(const char*)arg4 ;
-(int)Conference_SetBWEstMode:(BOOL)arg1 bFakeLargeFrameMode:(BOOL)arg2 ;
-(BOOL)chooseVideoPayload:(int*)arg1 count:(int)arg2 forConnectionResult:(tagCONNRESULT*)arg3 ;
-(void)getVideoSettings:(int)arg1 forInterface:(int)arg2 width:(int*)arg3 height:(int*)arg4 framerate:(int*)arg5 bitRate:(int*)arg6 ;
-(void)notifyDelegateToCancelRelay;
-(void)disconnectWithNoRemotePackets:(long long)arg1 ;
-(void)logDetailedNetworkInformation;
-(void)updateNetworkCheckHint:(double)arg1 ;
-(void)sendTimings;
-(BOOL)chooseAudioNetworkBitrate;
-(void)setupPeerInfo:(id)arg1 usingInviteData:(id)arg2 isCaller:(BOOL)arg3 capabilities:(id)arg4 ;
-(void)setupNonConnectionCheckCall;
-(BOOL)createIDSTunnelWithSocket:(int)arg1 error:(id*)arg2 ;
-(BOOL)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 useRelay:(BOOL)arg6 error:(id*)arg7 ;
-(void)reportDashboardEndResult;
-(void)cleanupMedia;
-(void)notifyDelegateAndEndCall:(long long)arg1 didRemoteCancel:(BOOL)arg2 error:(id)arg3 ;
-(void)initWithRelevantStorebagEntries;
-(BOOL)createConnectionDataForParticipantID:(id)arg1 pCallID:(unsigned*)arg2 nonCellularCandidateTimeout:(double)arg3 error:(id*)arg4 useRelay:(BOOL)arg5 ;
-(id)createSKEBlobWithRemoteSKEBlob:(id)arg1 ;
-(BOOL)startVideo:(BOOL)arg1 error:(id*)arg2 ;
-(BOOL)stopVideo:(BOOL)arg1 error:(id*)arg2 ;
-(void)resetICETimeoutToLongTimeout;
-(id)createRelayUpdateDictionary:(id)arg1 ;
-(void)sendCallingModeMessage;
-(void)enableAudio:(BOOL)arg1 ;
-(void)updateDeviceRole:(int)arg1 ;
-(id)createInitiateRelayDictionaryForCall:(unsigned)arg1 primaryConnection:(tagCONNRESULT*)arg2 ;
-(void)sendBasebandCodecMessage;
-(void)sipConnectThreadProc:(id)arg1 ;
-(void)deleteIDSTunnel;
-(void)logConnectionSuccess;
-(void)logConnectionType:(int)arg1 ;
-(void)inviteeICEResultTimer:(float)arg1 shouldBailIfRelay:(BOOL)arg2 ;
-(void)connectionResultFromSIP:(tagSIPCallbackData*)arg1 ;
-(int)handleIncomingWithCallID:(unsigned)arg1 msgIn:(const char*)arg2 msgOut:(char*)arg3 optional:(void*)arg4 confIndex:(int*)arg5 error:(id*)arg6 ;
-(void)setupEncryptionWithKey:(const _CFData*)arg1 confIndex:(int*)arg2 ;
-(BOOL)doBandwidthDetection:(tagHANDLE*)arg1 error:(id*)arg2 ;
-(BOOL)startMediaQueue:(id*)arg1 ;
-(void)processSIPMessage:(char*)arg1 msgOut:(char*)arg2 optional:(void*)arg3 confIndex:(int*)arg4 ;
-(BOOL)shouldNotifyDelegateDidStartBeforeAudioSetup;
-(void)notifyDelegateSessionStarted;
-(void)enableSessionHealthMonitor;
-(void)shutdownVoiceChatFromRemoteSIPSignal:(int)arg1 ;
-(void)destroySecondaryRelayDispatchTimer;
-(void)setupInitialSecondaryRelayWithCallbackRelayFlag:(BOOL)arg1 callID:(unsigned)arg2 ;
-(SecIdentityRef)retrieveIdentity;
-(void)updateQOS;
-(void)setupDTLSDefaults;
-(void)setLocalIdentityForKeyExchange;
-(void)initiateRelayRequest;
-(double)iceTimeoutInSeconds:(BOOL)arg1 ;
-(void)logIdentity:(SecIdentityRef)arg1 ;
-(long long)calculateSIPEndAction:(BOOL)arg1 currentState:(long long)arg2 error:(id)arg3 ;
-(void)doSipEndAction:(int)arg1 callID:(unsigned)arg2 error:(id)arg3 ;
-(void)disableSessionHealthMonitor;
-(void)stopAudio;
-(BOOL)stopMediaQueue:(id*)arg1 ;
-(BOOL)stopAFRC:(id*)arg1 ;
-(void)stopLoopback;
-(int)generateConnectionData:(char**)arg1 forCallID:(unsigned)arg2 connectionDataSize:(int*)arg3 nonCellularCandidateTimeout:(double)arg4 ;
-(void)disconnectWithNoRemotePackets:(long long)arg1 timeoutUsed:(double)arg2 ;
-(BOOL)createRTPHandles:(id*)arg1 ;
-(BOOL)prepareSRTPWithError:(id*)arg1 ;
-(BOOL)createMediaQueueHandle:(id*)arg1 ;
-(BOOL)negotiatePayloads:(int*)arg1 numPayloads:(int*)arg2 withError:(id*)arg3 ;
-(BOOL)setRTPDestinationWithError:(id*)arg1 ;
-(BOOL)negotiateMaxBandwidth:(int*)arg1 ;
-(int)getAllCompatibleVideoPayloads:(int*)arg1 ;
-(id)getCompatibleLocalFeaturesListForPayloads:(int*)arg1 count:(int)arg2 ;
-(BOOL)createSDP:(int*)arg1 audioPayloadCount:(int)arg2 secondaryPayloadTypes:(int*)arg3 secondaryPayloadCount:(int)arg4 videoPayloadTypes:(int*)arg5 videoPayloadCount:(int)arg6 localFeaturesList:(id)arg7 answerBandwidth:(int)arg8 maxBandwidth:(int)arg9 imageSizesSend:(imageTag*)arg10 imageSendCount:(int*)arg11 imageSizesRecv:(imageTag*)arg12 imageRecvCount:(int*)arg13 sdp:(char*)arg14 numSDPBytes:(int*)arg15 error:(id*)arg16 ;
-(void)launchDeadlineExitTimer;
-(BOOL)getForcedPayload:(int*)arg1 ;
-(void)getAllPayloadsForAudio:(int*)arg1 count:(int*)arg2 secondaryPayloads:(int*)arg3 secondaryCount:(int*)arg4 ;
-(void)getAllPayloadsForVideo:(int*)arg1 count:(int*)arg2 ;
-(BOOL)treatAsCellular;
-(id)allPayloadsLocalFeaturesString;
-(BOOL)is3GCall;
-(int)mapPacketMultiplexModeToRTPMode:(long long)arg1 ;
-(id)pickFeaturesStringForPayload:(int)arg1 featuresListDict:(id)arg2 remote:(BOOL)arg3 ;
-(BOOL)setMatchedFeaturesString:(char*)arg1 localFeaturesString:(id)arg2 remoteFeaturesString:(id)arg3 ;
-(BOOL)chooseSecondaryPayloads:(int*)arg1 count:(int)arg2 ;
-(BOOL)chooseDTXPayloads:(int*)arg1 count:(int)arg2 ;
-(void)getDecodePayloads:(int*)arg1 numPayloads:(int*)arg2 withPayload:(int)arg3 secondaryPayloads:(int*)arg4 numSecondaryPayloads:(int)arg5 ;
-(void)negotiateFeaturesString:(id)arg1 forPayload:(int)arg2 ;
-(BOOL)startAFRC:(id*)arg1 ;
-(BOOL)doesVideoPayloadMatchRemoteImageAttributeRules:(id)arg1 ;
-(BOOL)canNegotiateVideoPayload:(int)arg1 forConnectionResult:(tagCONNRESULT*)arg2 ;
-(BOOL)isValidVideoPayloadOverride:(id)arg1 ;
-(BOOL)startRTPWithError:(id*)arg1 ;
-(BOOL)sendSIPInviteWithError:(id*)arg1 ;
-(BOOL)setupCallerRTPChannelWithError:(id*)arg1 ;
-(void)stopAudioIOProc:(id)arg1 ;
-(void)setupAudioHeaderSize;
-(BOOL)allocateLastInputSampleBuffer;
-(BOOL)setupAudioTierPicker;
-(BOOL)setupAudioCookies;
-(void)startAudioIOWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)stopAudioIO:(/*^block*/id)arg1 ;
-(void)useAudioTier:(id)arg1 ;
-(void)updateAudioTxBitrate;
-(void)useAudioPayload:(id)arg1 withBitrate:(unsigned)arg2 ;
-(int)interfaceForConnectionResult:(tagCONNRESULT*)arg1 ;
-(void)adjustBitrateForConnectionType;
-(BOOL)startVideoReceive:(id*)arg1 ;
-(BOOL)stopVideoReceive:(id*)arg1 ;
-(void)setupAACELDPayload:(int)arg1 ;
-(unsigned)codecBitmapForPayloads:(int*)arg1 count:(int)arg2 ;
-(BOOL)sipConnectWithError:(id*)arg1 ;
-(void)stopLoopbackProc:(id)arg1 ;
-(id)createInitiateRelayDictionary;
-(id)deriveAspectRatioFLS;
-(id)retrieveRawFeaturesString;
-(id)createLocalFeaturesString;
-(unsigned)maxBitrateForConnectionType;
-(void)remotePauseDidChangeToState:(BOOL)arg1 forVideo:(BOOL)arg2 ;
-(void)doSipEndProc:(id)arg1 ;
-(const char*)matchedFeaturesStringForPayload:(int)arg1 ;
-(void)setupBitrateNegotation;
-(void)shouldSendBlackFrame:(BOOL)arg1 ;
-(void)handleDuplication:(BOOL)arg1 ;
-(void)createSecondaryRelayDispatchTimer:(float)arg1 callID:(unsigned)arg2 callerRequired:(BOOL)arg3 ;
-(void)resetState;
-(unsigned)connectionResultCallback:(tagCONNRESULT*)arg1 didReceiveICEPacket:(BOOL)arg2 didUseRelay:(BOOL)arg3 secretKey:(CFDataRef)arg4 skeResult:(int)arg5 ;
-(int)sipCallback:(int)arg1 callID:(unsigned)arg2 msgIn:(const char*)arg3 msgOut:(char*)arg4 optional:(void*)arg5 confIndex:(int*)arg6 ;
-(NSString *)description;
-(void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2 ;
-(void)loopbackSocketTunnel:(id)arg1 receivedData:(id)arg2 from:(tagIPPORT*)arg3 ;
-(void)resetLoopback;
-(void)deleteTCPTunnel;
-(BOOL)createTCPTunnelForParticipantID:(id)arg1 relayDictionary:(id)arg2 didOriginateRequest:(BOOL)arg3 relayType:(unsigned char)arg4 error:(id*)arg5 ;
-(void)setupLoopback;
-(void)wcmSetCallConfig:(unsigned)arg1 interferenceLevel:(unsigned)arg2 ;
-(void)wcmGetCallConfig:(unsigned*)arg1 targetBitrate:(unsigned*)arg2 ;
-(void)networkStateDidChange;
-(void)avTelephonyInterface:(id)arg1 vocoderInfoChangedToType:(id)arg2 sampleRate:(id)arg3 ;
-(void)vcSecureDataChannel:(id)arg1 receivedData:(id)arg2 ;
-(void)setDelegate:(NSObject*<VCCallSessionDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(NSObject*<VCCallSessionDelegate>)delegate;
-(long long)state;
-(void)setState:(long long)arg1 ;
-(void)setSampleRate:(long long)arg1 ;
-(long long)sampleRate;
-(BOOL)isStarted;
-(void)setOperatingMode:(int)arg1 ;
-(int)operatingMode;
-(void)setSessionID:(NSString *)arg1 ;
-(NSString *)sessionID;
-(double)networkQuality;
-(unsigned)connectionType;
-(void)setCapabilities:(VCCapabilities *)arg1 ;
-(VCCapabilities *)capabilities;
-(unsigned)callID;
-(void)sendARPLData:(id)arg1 toCallID:(unsigned)arg2 ;
-(BOOL)requiresWifi;
-(void)setRequiresWifi:(BOOL)arg1 ;
-(void)processRemoteIPChange:(id)arg1 callID:(unsigned)arg2 ;
-(int)natType;
-(void)triggerInterfaceChange;
-(BOOL)pullAudioSamples:(char*)arg1 timestamp:(unsigned*)arg2 byteCount:(int*)arg3 sampleCount:(int*)arg4 sampleRate:(int*)arg5 receivedBytes:(int*)arg6 lastReceivedAudioTime:(double*)arg7 padding:(char*)arg8 paddingLength:(char*)arg9 silence:(int*)arg10 ;
-(int)deviceRole;
-(void)setDeviceRole:(int)arg1 ;
-(int)numBufferBytesAvailable;
-(tagHANDLE*)rtpHandle;
-(unsigned)lastSentAudioSampleTime;
-(int)preferredAudioCodec;
-(VCAudioPayload *)currentAudioPayload;
-(VCJitterBuffer *)vcJitterBuffer;
-(VCImageAttributeRules *)imageAttributeRules;
-(void)setImageAttributeRules:(VCImageAttributeRules *)arg1 ;
-(NSString *)basebandCodecType;
-(NSNumber *)basebandCodecSampleRate;
-(id)initWithDeviceRole:(int)arg1 ;
-(BOOL)getRealAudioTxBitrate:(unsigned short*)arg1 RxBitrate:(unsigned short*)arg2 duplication:(unsigned short*)arg3 ;
-(BOOL)evaluateEnableRRxForConnectioResult:(tagCONNRESULT*)arg1 useCellular:(int*)arg2 ;
-(BOOL)isCaller;
-(BOOL)videoIsPaused;
-(BOOL)resultMatchesIPInRemoteConnectionData:(tagCONNRESULT*)arg1 ;
-(BOOL)didUseICE;
-(BOOL)isCallOngoing;
-(void)updateMaxPktLength:(tagCONNRESULT*)arg1 ;
-(unsigned)audioCapForConnectionResult:(const tagCONNRESULT*)arg1 ;
-(void)setUseControlByte:(BOOL)arg1 ;
-(void)setUseUEP:(BOOL)arg1 ;
-(BOOL)disconnect:(id)arg1 didRemoteCancel:(BOOL)arg2 ;
-(BOOL)chooseVideoPayloadForInterface:(int)arg1 connectionResult:(tagCONNRESULT*)arg2 ;
-(id)getVideoRuleForVideoMode:(unsigned long long)arg1 interface:(int)arg2 ;
-(id)getFeaturesListStringForPayload:(int)arg1 ;
-(int)applyFeaturesListStringForPayload:(int)arg1 ;
-(void)handlePrimaryConnChange:(tagCONNRESULT*)arg1 oldResult:(tagCONNRESULT*)arg2 ;
-(void)setConnectionResult:(tagCONNRESULT*)arg1 ;
-(void)setActiveConnectionResult:(tagCONNRESULT*)arg1 ;
-(void)resetVideoRulesForConnectionResult:(tagCONNRESULT*)arg1 interface:(int)arg2 videoReportingDictionary:(id)arg3 ;
-(void)setupSecondaryRelayForCall:(unsigned)arg1 callerRequired:(BOOL)arg2 ;
-(void)setupWCMClient;
-(void)cleanupWCMClient;
-(void)updateRemoteMediaStallState:(double)arg1 ;
-(void)updateLastReceivedPacketWithTimestamp:(double)arg1 ;
-(void)setRemoteVideoAttributes:(VideoAttributes *)arg1 ;
-(void)setupConnectionTimeoutTimerWithErrorCode:(int)arg1 detailedCode:(int)arg2 description:(id)arg3 reason:(id)arg4 ;
-(void)cancelConnectionTimeoutTimer;
-(int)bundleAndSendSamples:(char*)arg1 numEncodedBytes:(int)arg2 withPayload:(int)arg3 timeStamp:(unsigned)arg4 bufferedSamples:(int)arg5 hasNewSamples:(BOOL)arg6 ;
-(float)nextAudioInterval:(int)arg1 ;
-(int)sendAudioBundle:(BOOL)arg1 atTimeStamp:(unsigned)arg2 nextInterval:(float)arg3 ;
-(BOOL)bundleAudio:(void*)arg1 withPayload:(int)arg2 numInputBytes:(int)arg3 ;
-(void)processRemoteIPChange:(char*)arg1 dataLength:(int)arg2 callID:(unsigned)arg3 remoteCandidateVersion:(unsigned short)arg4 ;
-(BOOL)setPauseAudio:(BOOL)arg1 force:(BOOL)arg2 error:(id*)arg3 ;
-(BOOL)setPauseVideo:(BOOL)arg1 force:(BOOL)arg2 error:(id*)arg3 ;
-(BOOL)allowAdditionalConnection:(unsigned)arg1 ;
-(void)sendData:(id)arg1 encrypted:(BOOL)arg2 ;
-(void)getFrontCaptureTime:(float*)arg1 backCaptureTime:(float*)arg2 ;
-(void)setPreferredAudioCodec:(int)arg1 ;
-(int)packetsPerBundle;
-(void)startAWDStats;
-(void)setUseAFRC:(BOOL)arg1 ;
-(void)updateVideoQualityStatus:(double)arg1 bitrate:(double)arg2 time:(double)arg3 isRemote:(BOOL)arg4 ;
-(BOOL)isBetterForIncomingSIPThanOtherSession:(id)arg1 result:(tagCONNRESULT*)arg2 ;
-(void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2 ;
-(void)remoteCellTechStateUpdate:(int)arg1 maxRemoteBitrate:(unsigned)arg2 ;
-(void)schedulePrimaryConnectionChange:(tagCONNRESULT*)arg1 oldResult:(tagCONNRESULT*)arg2 ;
-(void)handlePendingPrimaryConnectionChange;
-(void)setQualityDelegate:(NSObject*<VideoConferenceChannelQualityDelegate>)arg1 ;
-(NSObject*<VideoConferenceChannelQualityDelegate>)qualityDelegate;
-(void)updateLastReceivedAudioTime;
-(void)updateLastReceivedPacket:(BOOL)arg1 ;
-(BOOL)handshakeComplete:(SSLContextRef)arg1 withError:(_CFError*)arg2 ;
-(void)timeoutUnfinishedConnection;
-(int)encodeAudio:(void*)arg1 numInputBytes:(int)arg2 outputBytes:(void*)arg3 numOutputBytes:(int)arg4 withPayload:(int*)arg5 isTalking:(BOOL)arg6 ;
-(void)sendThreadedAudio:(tagEncodedAudio*)arg1 buffer:(char*)arg2 bufferSize:(unsigned)arg3 ;
-(int)sendAudioHeartbeat:(unsigned)arg1 ;
-(BOOL)startConnectionWithParticipantID:(id)arg1 callID:(unsigned)arg2 usingInviteData:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 idsSocket:(int)arg6 error:(id*)arg7 ;
-(int)rtcpDescriptor;
-(id)inviteDataForParticipantID:(id)arg1 callID:(unsigned*)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id*)arg5 ;
-(void)setShouldSendAudio:(BOOL)arg1 ;
-(void)setPacketsPerBundle:(int)arg1 ;
-(void)setIsGKVoiceChat:(BOOL)arg1 ;
-(BOOL)isGKVoiceChat;
-(BOOL)setPauseAudio:(BOOL)arg1 error:(id*)arg2 ;
-(BOOL)setPauseVideo:(BOOL)arg1 error:(id*)arg2 ;
-(BOOL)stillWantsToRelay;
-(void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(BOOL)arg2 ;
-(void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(BOOL)arg2 ;
-(void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(BOOL)arg2 ;
-(void)rcvdFirstRemoteFrame;
-(id)remoteParticipantID;
-(id)localParticipantID;
-(void)localCameraSwitchedFrom:(int)arg1 to:(int)arg2 ;
-(id)callMetadata;
-(BOOL)isSKEOptimizationEnabled;
-(int)audioTierNetworkBitrate;
-(int)audioTierAudioBitrate;
-(int)audioTierPacketsPerBundle;
-(int)audioTierPayload;
-(NSDictionary *)dtxMetrics;
-(void)setSessionConferenceState:(unsigned)arg1 callID:(unsigned)arg2 ;
-(void)setSessionConferenceVisualRectangle:(CGRect)arg1 callID:(unsigned)arg2 ;
-(void)setPeerProtocolVersion:(unsigned)arg1 ;
-(BOOL)isVideoRunning;
-(void)setRtpHandle:(tagHANDLE*)arg1 ;
-(tagCONNRESULT*)connectionResult;
-(tagCONNRESULT*)activeConnectionResult;
-(tagCONNRESULT*)origConnectionResult;
-(void)setOrigConnectionResult:(tagCONNRESULT*)arg1 ;
-(long long)connectionChangeState;
-(void)setConnectionChangeState:(long long)arg1 ;
-(unsigned short)maxPacketLength;
-(void)setMaxPacketLength:(unsigned short)arg1 ;
-(void)setDidUseICE:(BOOL)arg1 ;
-(long long)videoPayload;
-(void)setVideoPayload:(long long)arg1 ;
-(BOOL)isAudioRunning;
-(BOOL)isWaitingForICEResult;
-(void)setIsWaitingForICEResult:(BOOL)arg1 ;
-(BOOL)receivedSIPInvite;
-(void)setReceivedSIPInvite:(BOOL)arg1 ;
-(NSObject*<VideoConferenceRealTimeChannel>)rtChannel;
-(void)setRtChannel:(NSObject*<VideoConferenceRealTimeChannel>)arg1 ;
-(int)numEncodedBytes;
-(void)setNumEncodedBytes:(int)arg1 ;
-(void)setNumBufferBytesAvailable:(int)arg1 ;
-(tagHANDLE*)hMediaQueue;
-(void)setHMediaQueue:(tagHANDLE*)arg1 ;
-(tagHANDLE*)hAFRC;
-(void)setHAFRC:(tagHANDLE*)arg1 ;
-(GKRingBuffer *)ringBuf;
-(void)setRingBuf:(GKRingBuffer *)arg1 ;
-(unsigned)lastReceived;
-(void)setLastReceived:(unsigned)arg1 ;
-(int)bundledPackets;
-(void)setBundledPackets:(int)arg1 ;
-(int)audioTxBitrate;
-(BOOL)useControlByte;
-(BOOL)useUEP;
-(unsigned char)inputMeter;
-(void)setInputMeter:(unsigned char)arg1 ;
-(BOOL)useCompressedConnectionData;
-(void)setUseCompressedConnectionData:(BOOL)arg1 ;
-(int)bandwidthUpstream;
-(void)setBandwidthUpstream:(int)arg1 ;
-(int)bandwidthDownstream;
-(void)setBandwidthDownstream:(int)arg1 ;
-(NSArray *)mutedPeers;
-(void)setMutedPeers:(NSArray *)arg1 ;
-(BOOL)audioIsPaused;
-(void)setNatType:(int)arg1 ;
-(void)setLastSentAudioSampleTime:(unsigned)arg1 ;
-(NSString *)peerCN;
-(void)setPeerCN:(NSString *)arg1 ;
-(double)packetLossRate;
-(void)setPacketLossRate:(double)arg1 ;
-(double)networkConditionsTimeoutInSeconds;
-(void)setNetworkConditionsTimeoutInSeconds:(double)arg1 ;
-(unsigned)roundTripTime;
-(void)setRoundTripTime:(unsigned)arg1 ;
-(int)signalRaw;
-(void)setSignalRaw:(int)arg1 ;
-(int)signalGrade;
-(void)setSignalGrade:(int)arg1 ;
-(float)packetLateAndMissingRatio;
-(void)setPacketLateAndMissingRatio:(float)arg1 ;
-(BOOL)shouldTimeoutPackets;
-(void)setShouldTimeoutPackets:(BOOL)arg1 ;
-(BOOL)useAFRC;
-(BOOL)isRTCPFBEnabled;
-(void)setIsRTCPFBEnabled:(BOOL)arg1 ;
-(BOOL)shouldSendAudio;
-(void)setIsStarted:(BOOL)arg1 ;
-(VideoAttributes *)remoteVideoAttributes;
-(unsigned)remoteFrameWidth;
-(void)setRemoteFrameWidth:(unsigned)arg1 ;
-(unsigned)remoteFrameHeight;
-(void)setRemoteFrameHeight:(unsigned)arg1 ;
-(BOOL)isRemoteMediaStalled;
-(void)setBasebandCodecSampleRate:(NSNumber *)arg1 ;
-(void)setBasebandCodecType:(NSString *)arg1 ;
-(int)pendingRelayCount;
-(void)setPendingRelayCount:(int)arg1 ;
-(BOOL)initialSecondaryRelaySetupDone;
-(void)setInitialSecondaryRelaySetupDone:(BOOL)arg1 ;
-(NSData *)srtpKeyBytes;
-(void)setSrtpKeyBytes:(NSData *)arg1 ;
-(int)signalStrength;
-(void)setSignalStrength:(int)arg1 ;
@end

