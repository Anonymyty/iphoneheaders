/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:29:19 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/MPQueueFeederDelegate.h>
#import <libobjc.A.dylib/MPAVQueueCoordinatorDataSource.h>
#import <libobjc.A.dylib/MPQueueBehaviorManaging.h>
#import <libobjc.A.dylib/NSCoding.h>

@protocol MPAVPlaylistManagerDelegate;
@class NSString, MPAVItem, MPQueuePlayer, MPQueueFeeder, MPAVQueueCoordinator, MPAVController;

@interface MPAVPlaylistManager : NSObject <MPQueueFeederDelegate, MPAVQueueCoordinatorDataSource, MPQueueBehaviorManaging, NSCoding> {

	NSString* _audioSessionModeOverride;
	MPAVItem* _currentItem;
	BOOL _goToTargetIndex;
	long long _lastSelectionDirection;
	MPQueuePlayer* _player;
	MPQueueFeeder* _playlistFeeder;
	long long _repeatMode;
	long long _targetIndex;
	BOOL _updatedAudioSessionMode;
	BOOL _changingPlayer;
	BOOL _changingPlaylistFeeder;
	long long _playbackMode;
	MPAVQueueCoordinator* _queueCoordinator;
	id<MPAVPlaylistManagerDelegate> _delegate;
	MPAVController* _avController;

}

@property (readonly) MPQueuePlayer * player;                                                             //@synthesize player=_player - In the implementation block
@property (readonly) MPAVQueueCoordinator * queueCoordinator;                                            //@synthesize queueCoordinator=_queueCoordinator - In the implementation block
@property (assign,nonatomic,__weak) id<MPAVPlaylistManagerDelegate> delegate;                            //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) MPQueueFeeder * playlistFeeder;                                           //@synthesize playlistFeeder=_playlistFeeder - In the implementation block
@property (getter=isChangingPlayer,nonatomic,readonly) BOOL changingPlayer;                              //@synthesize changingPlayer=_changingPlayer - In the implementation block
@property (getter=isChangingPlaylistFeeder,nonatomic,readonly) BOOL changingPlaylistFeeder;              //@synthesize changingPlaylistFeeder=_changingPlaylistFeeder - In the implementation block
@property (readonly) MPAVItem * currentItem;                                                             //@synthesize currentItem=_currentItem - In the implementation block
@property (readonly) long long currentIndex; 
@property (assign) long long repeatMode; 
@property (nonatomic,retain) NSString * audioSessionModeOverride;                                        //@synthesize audioSessionModeOverride=_audioSessionModeOverride - In the implementation block
@property (assign,nonatomic,__weak) MPAVController * avController;                                       //@synthesize avController=_avController - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) BOOL allowsUserVisibleUpcomingItems; 
@property (nonatomic,readonly) BOOL canSeek; 
@property (nonatomic,readonly) BOOL canSkipToPreviousItem; 
@property (nonatomic,readonly) long long playbackMode;                                                   //@synthesize playbackMode=_playbackMode - In the implementation block
@property (nonatomic,readonly) BOOL userCanChangeShuffleAndRepeatType; 
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(void)setDelegate:(id<MPAVPlaylistManagerDelegate>)arg1 ;
-(void)dealloc;
-(id)init;
-(id<MPAVPlaylistManagerDelegate>)delegate;
-(long long)currentIndex;
-(MPAVItem *)currentItem;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setRepeatMode:(long long)arg1 ;
-(long long)playbackMode;
-(NSString *)audioSessionModeOverride;
-(void)setAudioSessionModeOverride:(NSString *)arg1 ;
-(void)queueFeeder:(id)arg1 didChangeContentsWithPreferredStartIndex:(unsigned long long)arg2 error:(id)arg3 ;
-(void)queueFeeder:(id)arg1 didChangeContentsWithReplacementPlaybackContext:(id)arg2 ;
-(void)queueFeederDidInvalidateAssets:(id)arg1 ;
-(BOOL)allowsUserVisibleUpcomingItems;
-(MPQueueFeeder *)playlistFeeder;
-(long long)playlistIndexWithDelta:(long long)arg1 fromIndex:(long long)arg2 ignoreElapsedTime:(BOOL)arg3 ;
-(void)clearQueueFeeder;
-(void)reloadItemsKeepingCurrentItem:(BOOL)arg1 ;
-(BOOL)isChangingPlayer;
-(BOOL)isChangingPlaylistFeeder;
-(void)connectPlayer;
-(void)disconnectPlayer;
-(MPAVQueueCoordinator *)queueCoordinator;
-(void)setAvController:(MPAVController *)arg1 ;
-(void)handlePlaybackFailureForItem:(id)arg1 ;
-(void)queueCoordinator:(id)arg1 failedToLoadItem:(id)arg2 ;
-(id)queueCoordinator:(id)arg1 itemToFollowItem:(id)arg2 ;
-(void)queueCoordinator:(id)arg1 willInsertItem:(id)arg2 afterItem:(id)arg3 ;
-(void)queueCoordinatorDidChangeItems:(id)arg1 ;
-(id)itemForPlaylistIndex:(long long)arg1 ;
-(void)_awakeFromCoder:(id)arg1 ;
-(long long)playlistIndexOfIndex:(long long)arg1 inPlaylistFeeder:(id)arg2 ;
-(void)_setStateForPlaylistFeeder:(id)arg1 startIndex:(unsigned long long)arg2 ;
-(void)_storePlayWhileDownloadControllerDidFinishPlayWhileDownloadSessionNotification:(id)arg1 ;
-(void)_mediaLibraryDisplayValuesDidChangeNotification:(id)arg1 ;
-(MPAVController *)avController;
-(void)player:(id)arg1 currentItemDidChangeFromItem:(id)arg2 toItem:(id)arg3 ;
-(BOOL)setPlaylistFeeder:(id)arg1 startIndex:(long long)arg2 keepPlaying:(BOOL)arg3 ;
-(void)_handleDownloadCancelledForDownloadToken:(unsigned long long)arg1 ;
-(void)_reloadQueuedItemsIfPathBecameAvailable;
-(void)_applyVolumeNormalizationForQueuedItems;
-(long long)_prepareToQueuePlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2 ;
-(void)_notifyQueueFeederContentsChanged;
-(unsigned long long)_playbackIndexForDelta:(long long)arg1 fromIndex:(unsigned long long)arg2 ignoreElapsedTime:(BOOL)arg3 ;
-(void)_updateAudioSessionModeWithIndex:(unsigned long long)arg1 ;
-(void)_willFinishReloadWithQueueFeeder:(id)arg1 fromPlaybackContext:(id)arg2 ;
-(BOOL)canChangePlaylistFeeder;
-(id)_queuePlayerFeederItemForIndex:(long long)arg1 ;
-(long long)_nextItemIndex:(long long)arg1 repeatMode:(long long)arg2 ;
-(id)_itemToFollowItemIndex:(long long)arg1 skipUnavailableContent:(BOOL)arg2 ;
-(MPQueuePlayer *)player;
-(void)reloadWithPlaybackContext:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(BOOL)userCanChangeShuffleAndRepeatType;
-(void)_streamingDownloadSessionControllerDidFailDownloadSessionNotification:(id)arg1 ;
-(void)updateForSoundCheckDefaultsChange;
-(BOOL)canSkipItem:(id)arg1 ;
-(BOOL)canSkipToPreviousItem;
-(long long)playlistIndexOfItem:(id)arg1 ;
-(long long)repeatMode;
-(long long)playlistIndexOfItemIdentifier:(id)arg1 ;
-(unsigned long long)displayIndexForItem:(id)arg1 ;
-(unsigned long long)displayCountForItem:(id)arg1 ;
-(id)playlistFeederForPlaylistIndex:(long long)arg1 ;
-(long long)playlistIndexOfQueueIdentifier:(id)arg1 inPlaylistFeeder:(id)arg2 ;
-(void)setCurrentIndex:(long long)arg1 selectionDirection:(long long)arg2 ;
-(id)metadataItemForPlaylistIndex:(long long)arg1 ;
-(BOOL)canSeek;
@end

