/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, January 25, 2017 at 5:28:17 PM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct {
	float x;
	float y;
	float z;
} SCD_Struct_CM1;

typedef struct {
	double field1;
	double field2;
	double field3;
} SCD_Struct_CM2;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_CM3;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_CM4;

typedef struct {
	SCD_Struct_CM1 field1;
	SCD_Struct_CM1 field2;
	SCD_Struct_CM1 field3;
	SCD_Struct_CM4 field4;
	int field5;
	BOOL field6;
	BOOL field7;
	BOOL field8;
} SCD_Struct_CM5;

typedef struct {
	SCD_Struct_CM3 field1;
	int field2;
} SCD_Struct_CM6;

typedef struct {
	double w;
	double x;
	double y;
	double z;
} SCD_Struct_CM7;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
} SCD_Struct_CM8;

typedef struct {
	float pressure;
	float temperature;
} SCD_Struct_CM9;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_CM10;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_CM11;

typedef struct Unpacker {
	char* fData;
	unsigned fBitsLeft;
	unsigned char fPartial;
	unsigned long long fTimestampLast;
	long long fTimestampLastDelta;
	int fAccelerationLast[3];
} Unpacker;

typedef struct Sample {
	double timestamp;
	SCD_Struct_CM1 acceleration;
} Sample;

typedef struct {
	SCD_Struct_CM7 quaternion;
	SCD_Struct_CM1 userAcceleration;
	SCD_Struct_CM1 rotationRate;
	SCD_Struct_CM1 magneticField;
	int magneticFieldCalibrationLevel;
	BOOL doingYawCorrection;
	BOOL doingBiasEstimation;
	BOOL isInitialized;
} SCD_Struct_CM14;

typedef struct _compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > {
	Client __first_;
} compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >;

typedef struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > {
	compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > __ptr_;
} unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >;

typedef struct {
	double x;
	double y;
	double z;
	double magnitude;
	double horizontal;
	double declination;
	double inclination;
	double timestamp;
} SCD_Struct_CM17;

typedef struct __CFRunLoopTimer* CFRunLoopTimerRef;

typedef struct _compressed_pair<CLIspDataVisitor *, std::__1::default_delete<CLIspDataVisitor> > {
	CLIspDataVisitor __first_;
} compressed_pair<CLIspDataVisitor *, std::__1::default_delete<CLIspDataVisitor> >;

typedef struct unique_ptr<CLIspDataVisitor, std::__1::default_delete<CLIspDataVisitor> > {
	compressed_pair<CLIspDataVisitor *, std::__1::default_delete<CLIspDataVisitor> > __ptr_;
} unique_ptr<CLIspDataVisitor, std::__1::default_delete<CLIspDataVisitor> >;

typedef struct {
	SCD_Struct_CM1 field1;
	SCD_Struct_CM1 field2;
	double field3;
} SCD_Struct_CM21;

typedef struct {
	int field1;
} SCD_Struct_CM22;

typedef struct CLMotionActivity {
	int type;
	int confidence;
	int mountedState;
	int mountedConfidence;
	BOOL isStanding;
	float tilt;
	double timestamp;
	BOOL isVehicleConnected;
	int exitState;
	double estExitTime;
	double startTime;
} CLMotionActivity;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct {
	SCD_Struct_CM1 field1;
	SCD_Struct_CM1 field2;
	SCD_Struct_CM1 field3;
	SCD_Struct_CM1 field4;
	SCD_Struct_CM7 field5;
	unsigned long long field6;
} SCD_Struct_CM25;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > >;

typedef struct _tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > > {
	__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> > __pair3_;
} tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > > {
	tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > > __tree_;
} map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct _compressed_pair<float **, std::__1::allocator<float *> > {
	float __first_;
} compressed_pair<float **, std::__1::allocator<float *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<float> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<float> >;

typedef struct _split_buffer<float *, std::__1::allocator<float *> > {
	float __first_;
	float __begin_;
	float __end_;
	compressed_pair<float **, std::__1::allocator<float *> > __end_cap_;
} split_buffer<float *, std::__1::allocator<float *> >;

typedef struct deque<float, std::__1::allocator<float> > {
	split_buffer<float *, std::__1::allocator<float *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<float> > __size_;
} deque<float, std::__1::allocator<float> >;

typedef struct _compressed_pair<CMWakeGestureVisitor *, std::__1::default_delete<CMWakeGestureVisitor> > {
	CMWakeGestureVisitor __first_;
} compressed_pair<CMWakeGestureVisitor *, std::__1::default_delete<CMWakeGestureVisitor> >;

typedef struct unique_ptr<CMWakeGestureVisitor, std::__1::default_delete<CMWakeGestureVisitor> > {
	compressed_pair<CMWakeGestureVisitor *, std::__1::default_delete<CMWakeGestureVisitor> > __ptr_;
} unique_ptr<CMWakeGestureVisitor, std::__1::default_delete<CMWakeGestureVisitor> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > > {
	__tree_node<std::__1::__value_type<unsigned long, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > >;

typedef struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > > {
	tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > > __tree_;
} map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >;

