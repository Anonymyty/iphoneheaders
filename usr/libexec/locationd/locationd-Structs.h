/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:22 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/libexec/locationd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSObject<OS_os_transaction>, CLSilo;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned timestamp : 1;
} SCD_Struct_AL1;

typedef struct {
	unsigned startTime : 1;
	unsigned exitState : 1;
	unsigned mounted : 1;
	unsigned mountedConfidence : 1;
	unsigned turn : 1;
	unsigned isMoving : 1;
	unsigned isVehicular : 1;
} SCD_Struct_AL2;

typedef struct {
	unsigned timestamp : 1;
	unsigned pacebin : 1;
	unsigned recordId : 1;
	unsigned regularEntry : 1;
} SCD_Struct_AL3;

typedef struct {
	unsigned pace : 1;
	unsigned timestamp : 1;
	unsigned recordId : 1;
} SCD_Struct_AL4;

typedef struct {
	unsigned estExitTime : 1;
	unsigned startTime : 1;
	unsigned confidence : 1;
	unsigned exitState : 1;
	unsigned mountedConfidence : 1;
	unsigned mountedState : 1;
	unsigned tilt : 1;
	unsigned isStanding : 1;
	unsigned isVehicleConnected : 1;
} SCD_Struct_AL5;

typedef struct FairPlayHWInfo_ {
	unsigned IDLength;
	unsigned char ID[20];
} FairPlayHWInfo_;

typedef struct FPSAPContextOpaque_* FPSAPContextOpaque_Ref;

typedef struct {
	double list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_CL8;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_CM9;

typedef struct {
	unsigned strokeAmp : 1;
	unsigned strokeFrequency : 1;
} SCD_Struct_AL10;

typedef struct {
	unsigned secKey : 1;
	unsigned tileType : 1;
	unsigned tileX : 1;
	unsigned tileY : 1;
	unsigned isAllowOverCellular : 1;
} SCD_Struct_TR11;

typedef struct CLAccessoryObserverListener {
	void info;
	/*function pointer*/void* onConnected;
	/*function pointer*/void* onDisconnected;
	/*function pointer*/void* onNmeaReceived;
	/*function pointer*/void* onReferenceTime;
	/*function pointer*/void* onReferenceLocation;
	/*function pointer*/void* onEphemerisURL;
} CLAccessoryObserverListener;

typedef struct _compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> > {
	Client __first_;
} compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >;

typedef struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> > {
	compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> > __ptr_;
} unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >;

typedef struct _compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> > {
	Client __first_;
} compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >;

typedef struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> > {
	compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> > __ptr_;
} unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >;

typedef struct _compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> > {
	CLPowerAssertion __first_;
} compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >;

typedef struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> > {
	compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> > __ptr_;
} unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >;

typedef struct {
	unsigned altitude : 1;
	unsigned context : 1;
	unsigned course : 1;
	unsigned floor : 1;
	unsigned motionActivityConfidence : 1;
	unsigned motionActivityType : 1;
	unsigned provider : 1;
	unsigned speed : 1;
	unsigned verticalAccuracy : 1;
	unsigned motionVehicleConnected : 1;
	unsigned motionVehicleConnectedStateChanged : 1;
} SCD_Struct_CR19;

typedef struct {
	int field1;
	SCD_Struct_CM9 field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	int field11;
	double field12;
	int field13;
	SCD_Struct_CM9 field14;
	double field15;
	int field16;
	unsigned field17;
	int field18;
} SCD_Struct_CL20;

typedef struct CLStepCountEntryAddition {
	double totalCalibratedDistance;
	double rawPace;
	unsigned incrementalSteps;
	double incrementalActiveTime;
	double firstStepTime;
	double lastStepTime;
	double odometerSpeed;
	BOOL rawPaceDidJump;
	double calibratedDistance;
	double calibratedPace;
} CLStepCountEntryAddition;

typedef struct CLStepCountEntry {
	double timestamp;
	double startTime;
	double firstStepTime;
	unsigned count;
	double distance;
	double rawDistance;
	unsigned floorsAscended;
	unsigned floorsDescended;
	double currentPace;
	double currentCadence;
	double activeTime;
	int recordId;
	__CFString sourceId;
	BOOL isOdometerDistance;
	BOOL isOdometerPace;
} CLStepCountEntry;

typedef struct CLExtendedStepCountEntry {
	double startTime;
	CLStepCountEntry base;
	CLStepCountEntryAddition addition;
} CLExtendedStepCountEntry;

typedef struct {
	int list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_CR24;

typedef struct {
	unsigned bsLatitude : 1;
	unsigned bsLongitude : 1;
	unsigned sectorLatitude : 1;
	unsigned sectorLongitude : 1;
	unsigned bandclass : 1;
	unsigned celltype : 1;
	unsigned channel : 1;
	unsigned dayLightSavings : 1;
	unsigned ecn0 : 1;
	unsigned ltmOffset : 1;
	unsigned pnoffset : 1;
	unsigned rat : 1;
	unsigned rscp : 1;
	unsigned serverHash : 1;
	unsigned zoneid : 1;
} SCD_Struct_CR25;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_CL27;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _short {
	char __data_[23];
	SCD_Struct_CL27 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct CLMotionActivity {
	int type;
	int confidence;
	int mountedState;
	int mountedConfidence;
	BOOL isStanding;
	float tilt;
	double timestamp;
	BOOL isVehicleConnected;
	int exitState;
	double estExitTime;
	double startTime;
} CLMotionActivity;

typedef struct _compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> > {
	Client __first_;
} compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >;

typedef struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> > {
	compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> > __ptr_;
} unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > > {
	__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> > __pair3_;
} tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > >;

typedef struct map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *> > > {
	tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > > __tree_;
} map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *> > >;

typedef struct __CFRunLoopTimer* CFRunLoopTimerRef;

typedef struct {
	unsigned timestampGps : 1;
	unsigned accuracy : 1;
	unsigned distance : 1;
	unsigned gpsAltitude : 1;
	unsigned gpsSpeedAccuracy : 1;
	unsigned quality : 1;
	unsigned rawSpeed : 1;
	unsigned speed : 1;
} SCD_Struct_AL42;

typedef struct {
	unsigned basalNatalies : 1;
	unsigned duration : 1;
	unsigned mets : 1;
	unsigned timestamp : 1;
	unsigned basalMETs : 1;
	unsigned recordId : 1;
} SCD_Struct_AL43;

typedef struct {
	unsigned startTime : 1;
	unsigned firstCatherine : 1;
	unsigned firstCatherineStartTime : 1;
	unsigned longestDropout : 1;
	unsigned maxGoodCatherine : 1;
	unsigned meanCatherine : 1;
	unsigned meanGoodCatherine : 1;
	unsigned minGoodCatherine : 1;
	unsigned nCatherine : 1;
	unsigned nDropout : 1;
	unsigned nGoodCatherine : 1;
	unsigned nHighCatherine : 1;
	unsigned nInterpolatedCatherine : 1;
	unsigned nLowCatherine : 1;
	unsigned nSampleAndHoldCatherine : 1;
	unsigned nVeryHighCatherine : 1;
	unsigned nVeryLowCatherine : 1;
	unsigned onsetCatherine : 1;
	unsigned onsetReason : 1;
	unsigned persistedMinHR : 1;
	unsigned totalDropoutTime : 1;
	unsigned userMaxCatherine : 1;
} SCD_Struct_AL44;

typedef struct _compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> > {
	Client __first_;
} compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >;

typedef struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> > {
	compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> > __ptr_;
} unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > >;

typedef struct _compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> > {
	pair<double, unsigned int> __first_;
} compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> >;

typedef struct _split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> > {
	pair<double, unsigned int> __first_;
	pair<double, unsigned int> __begin_;
	pair<double, unsigned int> __end_;
	compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> > __end_cap_;
} split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> >;

typedef struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > {
	split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > > __size_;
} deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > >;

typedef struct queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > > {
	deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > c;
} queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > >;

typedef struct _compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> > {
	Client __first_;
} compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >;

typedef struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> > {
	compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> > __ptr_;
} unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >;

typedef struct _compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> > {
	Client __first_;
} compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >;

typedef struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> > {
	compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> > __ptr_;
} unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >;

typedef struct _compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > > {
	pair<double, CLMotionActivity::Type> __first_;
} compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >;

typedef struct vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > > {
	pair<double, CLMotionActivity::Type> __begin_;
	pair<double, CLMotionActivity::Type> __end_;
	compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > > __end_cap_;
} vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >;

typedef struct _compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> > {
	Client __first_;
} compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >;

typedef struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> > {
	compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> > __ptr_;
} unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >;

typedef struct _compressed_pair<CLLocationProvider_Type::Client *, std::__1::default_delete<CLLocationProvider_Type::Client> > {
	Client __first_;
} compressed_pair<CLLocationProvider_Type::Client *, std::__1::default_delete<CLLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > {
	compressed_pair<CLLocationProvider_Type::Client *, std::__1::default_delete<CLLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >;

typedef struct _compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > {
	Client __first_;
} compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > {
	compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >;

typedef struct shared_ptr<CLPersistentTimer> {
	CLPersistentTimer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CLPersistentTimer>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >;

typedef struct auto_ptr<CLSqliteDatabase> {
	CLSqliteDatabase __ptr_;
} auto_ptr<CLSqliteDatabase>;

typedef struct CLSqliteCachedStatement {
	CLSqliteDatabase fDb;
	sqlite3_stmt fStatement;
} CLSqliteCachedStatement;

typedef struct _compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> > {
	CLStepCountEntry __first_;
} compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >;

typedef struct _split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> > {
	CLStepCountEntry __first_;
	CLStepCountEntry __begin_;
	CLStepCountEntry __end_;
	compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> > __end_cap_;
} split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >;

typedef struct deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> > {
	split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> > __size_;
} deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >;

typedef struct BasicMutex {
	/*function pointer*/void* _vptr$Mutex;
	MutexInfo info;
} BasicMutex;

typedef struct CLStepCountRecorderDb {
	/*function pointer*/void* _vptr$CLActivityRecorderDb;
	auto_ptr<CLSqliteDatabase> fDb;
	char* fName;
	BasicMutex fMutex;
	BOOL fFatalError;
	deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> > fBuffer;
	int fInternalRecordCount;
	float fSampleInterval;
	CLStepCountEntry fPrevEntry;
	int fMaxBufferSize;
	NSObject<OS_os_transaction>* fInMemoryTransaction;
	CLSqliteCachedStatement fSqlGetCount;
	CLSqliteCachedStatement fSqlGetAllAsc;
	CLSqliteCachedStatement fSqlGetSinceAsc;
	CLSqliteCachedStatement fSqlGetAllDesc;
	CLSqliteCachedStatement fSqlDeleteById;
	CLSqliteCachedStatement fSqlDeleteAfter;
	CLSqliteCachedStatement fSqlDeleteAll;
	CLSqliteCachedStatement fSqlInsert;
	CLSqliteCachedStatement fSqlShiftStartTimes;
	CLSqliteCachedStatement fSqlMostRecent;
	CLSqliteCachedStatement fSqlFirstValidEntry;
	CLSqliteCachedStatement fSqlLowerBound;
	CLSqliteCachedStatement fSqlUpperBound;
	CLSqliteCachedStatement fSqlFirstStepTimeLowerBound;
	CLSqliteCachedStatement fSqlFirstStepTimeUpperBound;
	CLSqliteCachedStatement fSqlGetSinceByStartTimeAsc;
	BOOL fResetStepsRequested;
	BOOL fResetFloorsAndActiveTimeRequested;
	id fFinishedInsertHandler;
	fFinishedInsertSilo ;
	fPrevStepCount ^CLSilo;
	fPrevFloorsAscended I;
	fPrevFloorsDescended I;
	fPrevActiveTime I;
	fOffset d;
	fFloorAscendedOffset i;
	fFloorDescendedOffset i;
	fActiveTimeOffset i;
} CLStepCountRecorderDb;

typedef struct shared_ptr<CMStrideCalRecorderDb> {
	CMStrideCalRecorderDb __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CMStrideCalRecorderDb>;

typedef struct _compressed_pair<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry> > {
	CLElevationChangeEntry __first_;
} compressed_pair<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry> >;

typedef struct vector<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> > {
	CLElevationChangeEntry __begin_;
	CLElevationChangeEntry __end_;
	compressed_pair<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry> > __end_cap_;
} vector<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >;

typedef struct _compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> > {
	Client __first_;
} compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >;

typedef struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> > {
	compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> > __ptr_;
} unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >;

typedef struct CLStrideCalibrationSessionMetrics {
	int session;
	double startTime;
	double endTime;
	double sumCalibrationDistanceSuccess;
	double sumCalibrationDistanceFailOther;
	double sumCalibrationDistanceFailGps;
	double sumCalibrationDistanceFailPedometer;
	double sumCalibrationDistanceFailGradient;
	double sumCalibrationDistanceInvalidGain;
	double sumCalibrationDistanceInvalidSpeed;
	double sumCalibrationDistanceInvalidLength;
	double totalDistance;
} CLStrideCalibrationSessionMetrics;

typedef struct {
	unsigned long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_TR79;

typedef struct _compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client> > {
	Client __first_;
} compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client> >;

typedef struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client> > {
	compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client> > __ptr_;
} unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client> >;

typedef struct _compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> > {
	Client __first_;
} compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >;

typedef struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> > {
	compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> > __ptr_;
} unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >;

typedef struct _compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> > {
	Client __first_;
} compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >;

typedef struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> > {
	compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> > __ptr_;
} unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >;

typedef struct _CFURLRequest* CFURLRequestRef;

typedef struct _CFURLConnection* CFURLConnectionRef;

typedef struct _CFURLAuthChallenge* CFURLAuthChallengeRef;

typedef struct __CFURL* CFURLRef;

typedef struct _CFURLResponse* CFURLResponseRef;

typedef struct __CFURLConnectionSession* CFURLConnectionSessionRef;

typedef struct _compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> > {
	Client __first_;
} compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client> > {
	compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >;

typedef struct _compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> > {
	CLSuggestedActionDatabase __first_;
} compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> >;

typedef struct unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase> > {
	compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> > __ptr_;
} unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase> >;

typedef struct _compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> > {
	Client __first_;
} compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >;

typedef struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> > {
	compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> > __ptr_;
} unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >;

typedef struct _compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> > {
	Client __first_;
} compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >;

typedef struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> > {
	compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> > __ptr_;
} unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >;

typedef struct {
	id field1;
	char* field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned field7;
	unsigned long long field8;
	BOOL field9;
	unsigned long long field10;
	float field11;
	unsigned long long field12;
	id field13;
	int field14;
} SCD_Struct_CL100;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_CL101;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_CL102;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_CL103;

typedef struct {
	SCD_Struct_CL101 field1;
	SCD_Struct_CL101 field2;
} SCD_Struct_CL104;

typedef struct {
	SCD_Struct_CL100 field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long( field8;
	/*function pointer*/void* field9;
	= field10;
	SCD_Struct_CL102 field11;
	SCD_Struct_CL103) field12;
	/*function pointer*/void* field13;
	SCD_Struct_CL104 field14;
	unsigned char field15;
	_ field16;
	N field17;
	unsigned short field18;
	R field19;
	a field20;
	n field21;
	g field22;
	e field23;
	BOOL field24;
} SCD_Struct_CL105;

typedef struct CLDistanceCalc {
	double fM;
	double fN;
	double fRefLatRads;
	double fRefLatDegs;
	double fCosRefLat;
} CLDistanceCalc;

typedef struct {
	SCD_Struct_CL105 field1;
	unsigned long long field2;
	unsigned long long field3;
	BOOL field4;
	BOOL field5;
} SCD_Struct_CL107;

typedef struct {
	SCD_Struct_CM9 field1;
	double field2;
} SCD_Struct_CL108;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > >;

typedef struct _tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > > {
	__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> > __pair3_;
} tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > > {
	tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > > __tree_;
} map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > > {
	__tree_node<std::__1::__value_type<unsigned long, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > >;

typedef struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > > {
	tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > > __tree_;
} map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > >;

typedef struct _compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> > {
	pair<double, double> __first_;
} compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> >;

typedef struct _split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> > {
	pair<double, double> __first_;
	pair<double, double> __begin_;
	pair<double, double> __end_;
	compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> > __end_cap_;
} split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> >;

typedef struct deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > > {
	split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > > __size_;
} deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > >;

typedef struct duration<long double, std::__1::ratio<1, 1> > {
	D __rep_;
} duration<long double, std::__1::ratio<1, 1> >;

typedef struct duration<long long, std::__1::ratio<1, 1000000000> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000000000> >;

typedef struct duration<long long, std::__1::ratio<1, 1> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1> >;

typedef struct aligned_storage<unsigned int> {
	dummy_u dummy_;
	char data[4];
	a4) aligner_;
} aligned_storage<unsigned int>;

typedef struct optional<unsigned int> {
	BOOL m_initialized;
	aligned_storage<unsigned int> m_storage;
} optional<unsigned int>;

typedef struct aligned_storage<double> {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<double>;

typedef struct optional<double> {
	BOOL m_initialized;
	aligned_storage<double> m_storage;
} optional<double>;

typedef struct aligned_storage<unsigned long> {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<unsigned long>;

typedef struct optional<unsigned long> {
	BOOL m_initialized;
	aligned_storage<unsigned long> m_storage;
} optional<unsigned long>;

typedef struct aligned_storage<CLClientLocation> {
	dummy_u dummy_;
	char data[136];
	a4) aligner_;
} aligned_storage<CLClientLocation>;

typedef struct optional<CLClientLocation> {
	BOOL m_initialized;
	aligned_storage<CLClientLocation> m_storage;
} optional<CLClientLocation>;

typedef struct optional<unsigned int>Baligned_storage<unsigned int>(dummy_u[4c]a4)* ptional<unsigned int>Ref;

typedef struct optional<double>Baligned_storage<double>(dummy_u[8c]a8)* ptional<double>Ref;

typedef struct optional<unsigned long>Baligned_storage<unsigned long>(dummy_u[8c]a8)* ptional<unsigned long>Ref;

typedef struct optional<CLClientLocation>Baligned_storage<CLClientLocation>(dummy_u[136c]a4)* ptional<CLClientLocation>Ref;

typedef struct _compressed_pair<CLVehicularPedestrianOverallEstimator *, std::__1::default_delete<CLVehicularPedestrianOverallEstimator> > {
	CLVehicularPedestrianOverallEstimator __first_;
} compressed_pair<CLVehicularPedestrianOverallEstimator *, std::__1::default_delete<CLVehicularPedestrianOverallEstimator> >;

typedef struct unique_ptr<CLVehicularPedestrianOverallEstimator, std::__1::default_delete<CLVehicularPedestrianOverallEstimator> > {
	compressed_pair<CLVehicularPedestrianOverallEstimator *, std::__1::default_delete<CLVehicularPedestrianOverallEstimator> > __ptr_;
} unique_ptr<CLVehicularPedestrianOverallEstimator, std::__1::default_delete<CLVehicularPedestrianOverallEstimator> >;

typedef struct CLNavModeEstimator {
	unique_ptr<CLVehicularPedestrianOverallEstimator, std::__1::default_delete<CLVehicularPedestrianOverallEstimator> > fVehicularPedestrianEstimator;
	int fPrevClassification;
} CLNavModeEstimator;

typedef struct aligned_storage<CLLastFix> {
	dummy_u dummy_;
	char data[152];
	a8) aligner_;
} aligned_storage<CLLastFix>;

typedef struct optional<CLLastFix> {
	BOOL m_initialized;
	aligned_storage<CLLastFix> m_storage;
} optional<CLLastFix>;

typedef struct aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > > {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >;

typedef struct optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > > {
	BOOL m_initialized;
	aligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > > m_storage;
} optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >;

typedef struct aligned_storage<std::__1::vector<AvailabilityTile, std::__1::allocator<AvailabilityTile> > > {
	dummy_u dummy_;
	char data[24];
	a8) aligner_;
} aligned_storage<std::__1::vector<AvailabilityTile, std::__1::allocator<AvailabilityTile> > >;

typedef struct optional<std::__1::vector<AvailabilityTile, std::__1::allocator<AvailabilityTile> > > {
	BOOL m_initialized;
	aligned_storage<std::__1::vector<AvailabilityTile, std::__1::allocator<AvailabilityTile> > > m_storage;
} optional<std::__1::vector<AvailabilityTile, std::__1::allocator<AvailabilityTile> > >;

typedef struct time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > {
	duration<long double, std::__1::ratio<1, 1> > __d_;
} time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >;

typedef struct CLNavModeClassificationEstimate {
	time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > fTimestamp;
	int fCurrent;
	BOOL fChanged;
} CLNavModeClassificationEstimate;

typedef struct optional<CLLastFix>Baligned_storage<CLLastFix>(dummy_u[152c]a8)* ptional<CLLastFix>Ref;

typedef struct optional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >Baligned_storage<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >(dummy_u[8c]a8)* ptional<std::__1::chrono::time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > >Ref;

typedef struct _compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > > {
	SiloBufferDispatcher<CLDeviceMotion::Sample> __first_;
} compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > >;

typedef struct unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > > {
	compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > > __ptr_;
} unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > >;

typedef struct CLMotionNotifierClient<CLDeviceMotion, CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > {
	CLMotionNotifier _notifier;
	int _notification;
	unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > > _dispatcher;
} CLMotionNotifierClient<CLDeviceMotion, CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> >;

typedef struct _compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > > {
	SiloBufferDispatcher<CLGyro::Sample> __first_;
} compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > >;

typedef struct unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > > {
	compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > > __ptr_;
} unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > >;

typedef struct CLMotionNotifierClient<CLGyro, CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > {
	CLMotionNotifier _notifier;
	int _notification;
	unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > > _dispatcher;
} CLMotionNotifierClient<CLGyro, CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> >;

typedef struct _compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > > {
	SiloBufferDispatcher<CLPressure::Sample> __first_;
} compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > >;

typedef struct unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > > {
	compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > > __ptr_;
} unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > >;

typedef struct CLMotionNotifierClient<CLPressure, CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > {
	CLMotionNotifier _notifier;
	int _notification;
	unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > > _dispatcher;
} CLMotionNotifierClient<CLPressure, CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> >;

typedef struct _compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > > {
	SiloBufferDispatcher<CLAccelerometer::Sample> __first_;
} compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > >;

typedef struct unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > > {
	compressed_pair<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> *, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > > __ptr_;
} unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > >;

typedef struct CLMotionNotifierClient<CLAccelerometer, CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > {
	CLMotionNotifier _notifier;
	int _notification;
	unique_ptr<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample>, std::__1::default_delete<CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > > _dispatcher;
} CLMotionNotifierClient<CLAccelerometer, CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> >;

typedef struct _compressed_pair<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > *, std::__1::allocator<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > > > {
	unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > __first_;
} compressed_pair<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > *, std::__1::allocator<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > > >;

typedef struct vector<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> >, std::__1::allocator<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > > > {
	unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > __begin_;
	unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > __end_;
	compressed_pair<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > *, std::__1::allocator<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > > > __end_cap_;
} vector<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> >, std::__1::allocator<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > > >;

typedef struct CLDaemonTracerState {
	BOOL _recording;
	unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> > _daemonStatusClient;
	vector<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> >, std::__1::allocator<std::__1::unique_ptr<LocationProviderClient, std::__1::default_delete<LocationProviderClient> > > > _locationClients;
	unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> > _motionStateClient;
	unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> > _wifiServiceClient;
	CLMotionNotifierClient<CLAccelerometer, CLMotionNotifier::SiloBufferDispatcher<CLAccelerometer::Sample> > _imuAccelClient;
	CLMotionNotifierClient<CLPressure, CLMotionNotifier::SiloBufferDispatcher<CLPressure::Sample> > _imuPressureClient;
	CLMotionNotifierClient<CLGyro, CLMotionNotifier::SiloBufferDispatcher<CLGyro::Sample> > _imuGyroClient;
	CLMotionNotifierClient<CLDeviceMotion, CLMotionNotifier::SiloBufferDispatcher<CLDeviceMotion::Sample> > _imuDeviceMotionGyroClient;
} CLDaemonTracerState;

typedef struct aligned_storage<bool> {
	dummy_u dummy_;
	char data[1];
	c) aligner_;
} aligned_storage<bool>;

typedef struct optional<bool> {
	BOOL m_initialized;
	aligned_storage<bool> m_storage;
} optional<bool>;

