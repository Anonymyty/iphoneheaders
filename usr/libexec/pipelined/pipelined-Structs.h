/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:27 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/libexec/pipelined
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class IOSAltimeter, NSInputStream, , NSObject<OS_dispatch_queue>;

typedef struct {
	double latitude;
	double longitude;
} SCD_Struct_CL0;

typedef struct {
	int suitability;
	SCD_Struct_CL0 coordinate;
	double horizontalAccuracy;
	double altitude;
	double verticalAccuracy;
	double speed;
	double speedAccuracy;
	double course;
	double courseAccuracy;
	double timestamp;
	int confidence;
	double lifespan;
	int type;
	SCD_Struct_CL0 rawCoordinate;
	double rawCourse;
	int floor;
	unsigned integrity;
	int referenceFrame;
} SCD_Struct_CL1;

typedef struct {
	int field1;
	SCD_Struct_CL0 field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	int field11;
	double field12;
	int field13;
	SCD_Struct_CL0 field14;
	double field15;
	int field16;
	unsigned field17;
	int field18;
} SCD_Struct_CL2;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	float field6;
	float field7;
	float field8;
	BOOL field9;
	int field10;
	SCD_Struct_CL0 field11;
	double field12;
	int field13;
	int field14;
	BOOL field15;
	SCD_Struct_CL0 field16;
	float field17;
	SCD_Struct_CL0 field18;
	double field19;
} SCD_Struct_CL3;

typedef struct _NSZone* NSZoneRef;

typedef struct duration<long long, std::__1::ratio<1, 1000> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000> >;

typedef struct aligned_storage<bool> {
	dummy_u dummy_;
	char data[1];
	c) aligner_;
} aligned_storage<bool>;

typedef struct optional<bool> {
	BOOL m_initialized;
	aligned_storage<bool> m_storage;
} optional<bool>;

typedef struct duration<long long, std::__1::ratio<1, 1000000000> > {
	long long __rep_;
} duration<long long, std::__1::ratio<1, 1000000000> >;

typedef struct aligned_storage<int> {
	dummy_u dummy_;
	char data[4];
	a4) aligner_;
} aligned_storage<int>;

typedef struct optional<int> {
	BOOL m_initialized;
	aligned_storage<int> m_storage;
} optional<int>;

typedef struct optional<int>Baligned_storage<int>(dummy_u[4c]a4)* ptional<int>Ref;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __WiFiManagerClient* WiFiManagerClientRef;

typedef struct _compressed_pair<NSArray *__strong *, std::__1::allocator<NSArray *> > {
	id __first_;
} compressed_pair<NSArray *__strong *, std::__1::allocator<NSArray *> >;

typedef struct vector<NSArray *, std::__1::allocator<NSArray *> > {
	id __begin_;
	id __end_;
	compressed_pair<NSArray *__strong *, std::__1::allocator<NSArray *> > __end_cap_;
} vector<NSArray *, std::__1::allocator<NSArray *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> > >;

typedef struct _list_node_base<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> {
	__list_node<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> __prev_;
	__list_node<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> __next_;
} list_node_base<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *>;

typedef struct list<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, std::__1::allocator<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> > > > {
	list_node_base<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, void *> > > __size_alloc_;
} list<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> >, std::__1::allocator<std::__1::unique_ptr<ScanInformation, std::__1::default_delete<ScanInformation> > > >;

typedef struct atomic<unsigned long> {
	AQ __a_;
} atomic<unsigned long>;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct __WiFiDeviceClient* WiFiDeviceClientRef;

typedef struct atomic<LogLevel> {
	Aq __a_;
} atomic<LogLevel>;

typedef struct _compressed_pair<IOSActivityStateSensorBridge *, std::__1::default_delete<IOSActivityStateSensorBridge> > {
	IOSActivityStateSensorBridge __first_;
} compressed_pair<IOSActivityStateSensorBridge *, std::__1::default_delete<IOSActivityStateSensorBridge> >;

typedef struct unique_ptr<IOSActivityStateSensorBridge, std::__1::default_delete<IOSActivityStateSensorBridge> > {
	compressed_pair<IOSActivityStateSensorBridge *, std::__1::default_delete<IOSActivityStateSensorBridge> > __ptr_;
} unique_ptr<IOSActivityStateSensorBridge, std::__1::default_delete<IOSActivityStateSensorBridge> >;

typedef struct _compressed_pair<IOSInertialSensorBridge *, std::__1::default_delete<IOSInertialSensorBridge> > {
	IOSInertialSensorBridge __first_;
} compressed_pair<IOSInertialSensorBridge *, std::__1::default_delete<IOSInertialSensorBridge> >;

typedef struct unique_ptr<IOSInertialSensorBridge, std::__1::default_delete<IOSInertialSensorBridge> > {
	compressed_pair<IOSInertialSensorBridge *, std::__1::default_delete<IOSInertialSensorBridge> > __ptr_;
} unique_ptr<IOSInertialSensorBridge, std::__1::default_delete<IOSInertialSensorBridge> >;

typedef struct _compressed_pair<BeaconSensor *, std::__1::default_delete<BeaconSensor> > {
	BeaconSensor __first_;
} compressed_pair<BeaconSensor *, std::__1::default_delete<BeaconSensor> >;

typedef struct unique_ptr<BeaconSensor, std::__1::default_delete<BeaconSensor> > {
	compressed_pair<BeaconSensor *, std::__1::default_delete<BeaconSensor> > __ptr_;
} unique_ptr<BeaconSensor, std::__1::default_delete<BeaconSensor> >;

typedef struct _compressed_pair<GPSSensor *, std::__1::default_delete<GPSSensor> > {
	GPSSensor __first_;
} compressed_pair<GPSSensor *, std::__1::default_delete<GPSSensor> >;

typedef struct unique_ptr<GPSSensor, std::__1::default_delete<GPSSensor> > {
	compressed_pair<GPSSensor *, std::__1::default_delete<GPSSensor> > __ptr_;
} unique_ptr<GPSSensor, std::__1::default_delete<GPSSensor> >;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_IO32;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _compressed_pair<std::__1::weak_ptr<sensors::Observer> *, std::__1::allocator<std::__1::weak_ptr<sensors::Observer> > > {
	weak_ptr<sensors::Observer> __first_;
} compressed_pair<std::__1::weak_ptr<sensors::Observer> *, std::__1::allocator<std::__1::weak_ptr<sensors::Observer> > >;

typedef struct vector<std::__1::weak_ptr<sensors::Observer>, std::__1::allocator<std::__1::weak_ptr<sensors::Observer> > > {
	weak_ptr<sensors::Observer> __begin_;
	weak_ptr<sensors::Observer> __end_;
	compressed_pair<std::__1::weak_ptr<sensors::Observer> *, std::__1::allocator<std::__1::weak_ptr<sensors::Observer> > > __end_cap_;
} vector<std::__1::weak_ptr<sensors::Observer>, std::__1::allocator<std::__1::weak_ptr<sensors::Observer> > >;

typedef struct _short {
	char __data_[23];
	SCD_Struct_IO32 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct Logger {
	/*function pointer*/void* _vptr$ILogger;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > category;
	char categoryLogLevel;
} Logger;

typedef struct AltimeterSensor {
	/*function pointer*/void* _vptr$Sensor;
	Logger lg;
	vector<std::__1::weak_ptr<sensors::Observer>, std::__1::allocator<std::__1::weak_ptr<sensors::Observer> > > observers;
	IOSAltimeter* _impl;
} AltimeterSensor;

typedef struct optional<AltimeterSensor> {
	/*function pointer*/void* ;
	char __null_state_;
	AltimeterSensor) __val_;
	BOOL __engaged_;
} optional<AltimeterSensor>;

typedef struct _compressed_pair<GenericWifiSensor *, std::__1::default_delete<GenericWifiSensor> > {
	GenericWifiSensor __first_;
} compressed_pair<GenericWifiSensor *, std::__1::default_delete<GenericWifiSensor> >;

typedef struct unique_ptr<GenericWifiSensor, std::__1::default_delete<GenericWifiSensor> > {
	compressed_pair<GenericWifiSensor *, std::__1::default_delete<GenericWifiSensor> > __ptr_;
} unique_ptr<GenericWifiSensor, std::__1::default_delete<GenericWifiSensor> >;

typedef struct atomic<ScannerSettingsChangeListener *> {
	AScannerSettingsChangeListener __a_;
} atomic<ScannerSettingsChangeListener *>;

typedef struct shared_ptr<WifiScanStrategy> {
	WifiScanStrategy __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<WifiScanStrategy>;

typedef struct aligned_storage<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > >;

typedef struct optional<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > {
	BOOL m_initialized;
	aligned_storage<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > m_storage;
} optional<std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > >;

typedef struct _compressed_pair<CellScanner *, std::__1::default_delete<CellScanner> > {
	CellScanner __first_;
} compressed_pair<CellScanner *, std::__1::default_delete<CellScanner> >;

typedef struct unique_ptr<CellScanner, std::__1::default_delete<CellScanner> > {
	compressed_pair<CellScanner *, std::__1::default_delete<CellScanner> > __ptr_;
} unique_ptr<CellScanner, std::__1::default_delete<CellScanner> >;

typedef struct _compressed_pair<PedometrySensor *, std::__1::default_delete<PedometrySensor> > {
	PedometrySensor __first_;
} compressed_pair<PedometrySensor *, std::__1::default_delete<PedometrySensor> >;

typedef struct unique_ptr<PedometrySensor, std::__1::default_delete<PedometrySensor> > {
	compressed_pair<PedometrySensor *, std::__1::default_delete<PedometrySensor> > __ptr_;
} unique_ptr<PedometrySensor, std::__1::default_delete<PedometrySensor> >;

typedef const struct vector<std::__1::pair<NSInputStream *, unsigned long>, std::__1::allocator<std::__1::pair<NSInputStream *, unsigned long> > >* vector<std::__1::pair<NSInputStream *, unsigned long>, std::__1::allocator<std::__1::pair<NSInputStream *, unsigned long> > >Ref;

typedef struct _compressed_pair<NSInputStream *__strong *, std::__1::allocator<NSInputStream *> > {
	id __first_;
} compressed_pair<NSInputStream *__strong *, std::__1::allocator<NSInputStream *> >;

typedef struct vector<NSInputStream *, std::__1::allocator<NSInputStream *> > {
	id __begin_;
	id __end_;
	compressed_pair<NSInputStream *__strong *, std::__1::allocator<NSInputStream *> > __end_cap_;
} vector<NSInputStream *, std::__1::allocator<NSInputStream *> >;

typedef struct pair<NSInputStream *, unsigned long> {
	NSInputStream* first;
	unsigned long long second;
} pair<NSInputStream *, unsigned long>;

typedef struct {
	long long field1;
	void field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_NS57;

typedef struct __CFString* CFStringRef;

typedef struct _compressed_pair<CoastedGravityEstimatorImpl *, std::__1::default_delete<CoastedGravityEstimatorImpl> > {
	CoastedGravityEstimatorImpl __first_;
} compressed_pair<CoastedGravityEstimatorImpl *, std::__1::default_delete<CoastedGravityEstimatorImpl> >;

typedef struct unique_ptr<CoastedGravityEstimatorImpl, std::__1::default_delete<CoastedGravityEstimatorImpl> > {
	compressed_pair<CoastedGravityEstimatorImpl *, std::__1::default_delete<CoastedGravityEstimatorImpl> > __ptr_;
} unique_ptr<CoastedGravityEstimatorImpl, std::__1::default_delete<CoastedGravityEstimatorImpl> >;

typedef struct CoastedGravityEstimator {
	unique_ptr<CoastedGravityEstimatorImpl, std::__1::default_delete<CoastedGravityEstimatorImpl> > fImpl;
} CoastedGravityEstimator;

typedef const struct ActivityPolicyoptional<std::__1::chrono::duration<double, std::__1::ratio<1, 1> > >Baligned_storage<std::__1::chrono::duration<double, std::__1::ratio<1, 1> > >(dummy_u[8c]a8)optional<std::__1::chrono::duration<double, std::__1::ratio<1, 1> > >Baligned_storage<std::__1::chrono::duration<double, std::__1::ratio<1, 1> > >(dummy_u[8c]a8)optional<std::__1::chrono::duration<double, std::__1::ratio<1, 1> > >Baligned_storage<std::__1::chrono::duration<double, std::__1::ratio<1, 1> > >(dummy_u[8c]a8)** ctivityPolicyRef;

typedef struct aligned_storage<DeferredState> {
	dummy_u dummy_;
	char data[32];
	a8) aligner_;
} aligned_storage<DeferredState>;

typedef struct optional<DeferredState> {
	BOOL m_initialized;
	aligned_storage<DeferredState> m_storage;
} optional<DeferredState>;

typedef struct array<void ()(), 2> {
	/*^block*/id __elems_[2];
} array<void ()(), 2>;

typedef struct aligned_storage<OSTransaction> {
	dummy_u dummy_;
	char data[8];
	a8) aligner_;
} aligned_storage<OSTransaction>;

typedef struct optional<OSTransaction> {
	BOOL m_initialized;
	aligned_storage<OSTransaction> m_storage;
} optional<OSTransaction>;

typedef struct aligned_storage<SelectedLocations> {
	dummy_u dummy_;
	char data[80];
	a8) aligner_;
} aligned_storage<SelectedLocations>;

typedef struct optional<SelectedLocations> {
	BOOL m_initialized;
	aligned_storage<SelectedLocations> m_storage;
} optional<SelectedLocations>;

typedef struct _compressed_pair<FloorEnvironmentLoader *, std::__1::default_delete<FloorEnvironmentLoader> > {
	FloorEnvironmentLoader __first_;
} compressed_pair<FloorEnvironmentLoader *, std::__1::default_delete<FloorEnvironmentLoader> >;

typedef struct unique_ptr<FloorEnvironmentLoader, std::__1::default_delete<FloorEnvironmentLoader> > {
	compressed_pair<FloorEnvironmentLoader *, std::__1::default_delete<FloorEnvironmentLoader> > __ptr_;
} unique_ptr<FloorEnvironmentLoader, std::__1::default_delete<FloorEnvironmentLoader> >;

typedef struct _compressed_pair<LocalizerApi *, std::__1::default_delete<LocalizerApi> > {
	LocalizerApi __first_;
} compressed_pair<LocalizerApi *, std::__1::default_delete<LocalizerApi> >;

typedef struct unique_ptr<LocalizerApi, std::__1::default_delete<LocalizerApi> > {
	compressed_pair<LocalizerApi *, std::__1::default_delete<LocalizerApi> > __ptr_;
} unique_ptr<LocalizerApi, std::__1::default_delete<LocalizerApi> >;

typedef struct aligned_storage<DataRun> {
	dummy_u dummy_;
	char data[48];
	a8) aligner_;
} aligned_storage<DataRun>;

typedef struct optional<DataRun> {
	BOOL m_initialized;
	aligned_storage<DataRun> m_storage;
} optional<DataRun>;

typedef struct shared_ptr<PlatformInfo> {
	PlatformInfo __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<PlatformInfo>;

typedef struct shared_ptr<_EventBusCollection> {
	_EventBusCollection __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<_EventBusCollection>;

typedef struct shared_ptr<SensorCollection> {
	SensorCollection __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<SensorCollection>;

typedef struct aligned_storage<DispatchLocalizerObserver> {
	dummy_u dummy_;
	char data[16];
	a8) aligner_;
} aligned_storage<DispatchLocalizerObserver>;

typedef struct optional<DispatchLocalizerObserver> {
	BOOL m_initialized;
	aligned_storage<DispatchLocalizerObserver> m_storage;
} optional<DispatchLocalizerObserver>;

typedef struct shared_ptr<sensors::CombinedLogger> {
	CombinedLogger __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<sensors::CombinedLogger>;

typedef struct shared_ptr<std::__1::atomic<bool> > {
	atomic<bool> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<std::__1::atomic<bool> >;

typedef struct shared_ptr<FilesystemDb> {
	FilesystemDb __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<FilesystemDb>;

typedef struct optional<OSTransaction>Baligned_storage<OSTransaction>(dummy_u[8c]a8)* ptional<OSTransaction>Ref;

typedef struct DeferredState@@optional<OSTransaction>Baligned_storage<OSTransaction>(dummy_u[8c]a8)* eferredStateRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > >;

typedef struct _compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> {
	__hash_node<std::__1::basic_string<char>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::basic_string<char>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > > {
	__hash_node<std::__1::basic_string<char>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::basic_string<char>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::basic_string<char>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::basic_string<char>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::basic_string<char>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > >;

typedef struct _hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > {
	unique_ptr<std::__1::__hash_node<std::__1::basic_string<char>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char> > > __p2_;
	compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char> > > __p3_;
} hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >;

typedef struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > {
	hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > __table_;
} unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >;

typedef struct _compressed_pair<std::__1::pair<std::__1::basic_string<char>, NSError *> *, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, NSError *> > > {
	pair<std::__1::basic_string<char>, NSError *> __first_;
} compressed_pair<std::__1::pair<std::__1::basic_string<char>, NSError *> *, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, NSError *> > >;

typedef struct vector<std::__1::pair<std::__1::basic_string<char>, NSError *>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, NSError *> > > {
	pair<std::__1::basic_string<char>, NSError *> __begin_;
	pair<std::__1::basic_string<char>, NSError *> __end_;
	compressed_pair<std::__1::pair<std::__1::basic_string<char>, NSError *> *, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, NSError *> > > __end_cap_;
} vector<std::__1::pair<std::__1::basic_string<char>, NSError *>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, NSError *> > >;

typedef struct ActiveRequestsSet {
	BOOL _will_download;
	BOOL _interrupted;
	id _callback;
	_errCallback ;
	 id;
	NSObject<OS_dispatch_queue>* _q;
	vector<std::__1::pair<std::__1::basic_string<char>, NSError *>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, NSError *> > > _errors;
	unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > _requests;
} ActiveRequestsSet;

typedef struct aligned_storage<std::__1::basic_string<char> > {
	dummy_u dummy_;
	char data[24];
	a8) aligner_;
} aligned_storage<std::__1::basic_string<char> >;

typedef struct optional<std::__1::basic_string<char> > {
	BOOL m_initialized;
	aligned_storage<std::__1::basic_string<char> > m_storage;
} optional<std::__1::basic_string<char> >;

