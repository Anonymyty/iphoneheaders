/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:27 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/libexec/pipelined
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <pipelined/pipelined-Structs.h>
#import <pipelined/KeybagDelegate.h>
#import <pipelined/CLIndoorProviderFailedImportDelegate.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <pipelined/CLIndoorTilePrefetcherDelegate.h>

@protocol OS_dispatch_queue;
@class CLIndoorProvider, Keybag, NSMutableArray, NSObject, CLIndoorTilePrefetcher, NSURL, NSString;

@interface CLIndoorServiceDelegate : NSObject <KeybagDelegate, CLIndoorProviderFailedImportDelegate, NSXPCListenerDelegate, CLIndoorTilePrefetcherDelegate> {

	optional<std::__1::basic_string<char> > _workdirOverride;
	shared_ptr<FilesystemDb>* _prefetchDb;
	shared_ptr<FilesystemDb>* fFsDb;
	CLIndoorProvider* _currentProvider;
	BOOL _shutdown;
	Keybag* _keybag;
	int _prefetchFloorLimit;
	NSMutableArray* _prefetchCompleteCallbacks;
	NSObject*<OS_dispatch_queue> _q;
	CLIndoorTilePrefetcher* _prefetcher;
	NSURL* _workdir;

}

@property (q,nonatomic,readonly) NSObject*<OS_dispatch_queue> q;                      //@synthesize q=_q - In the implementation block
@property (assign,nonatomic,__weak) CLIndoorTilePrefetcher * prefetcher;              //@synthesize prefetcher=_prefetcher - In the implementation block
@property (nonatomic,copy) NSURL * workdir;                                           //@synthesize workdir=_workdir - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)isEntitled:(id)arg1 forEntitlement:(id)arg2 ;
+(void)logViolation:(id)arg1 ofEntitlement:(id)arg2 forSelector:(SEL)arg3 ;
+(BOOL)isEntitled:(id)arg1 forEntitlement:(id)arg2 allowRootEverything:(BOOL)arg3 ;
+(id)defaultWorkdir;
+(shared_ptr<FilesystemDb>*)createPrefetchDbRelativeTo:(id)arg1 ;
+(shared_ptr<FilesystemDb>*)createLocalizerDbWithRootDir:(BOOL)arg1 relativeTo:(id)arg2 ;
+(shared_ptr<FilesystemDb>*)createDb:(int)arg1 basedir:(id)arg2 rootdir:(id)arg3 relativeTo:(id)arg4 ;
+(shared_ptr<FilesystemDb>*)createLocalizerCleanupDbRelativeTo:(id)arg1 ;
+(id)versionString;
-(NSObject*<OS_dispatch_queue>)q;
-(void)setPrefetcher:(CLIndoorTilePrefetcher *)arg1 ;
-(void)onPrefetchFinishedInvoke:(/*^block*/id)arg1 ;
-(void)reloadAvailabilityTilePrefetchParameters;
-(void)clearTiles:(id)arg1 ;
-(pair<long, long>)numFloors;
-(NSURL *)workdir;
-(pair<std::__1::shared_ptr<FilesystemDb>, std::__1::shared_ptr<FilesystemDb> >*)onXPCConnectionQueueEraseAndReinitializeCorruptedDbs;
-(CLIndoorTilePrefetcher *)prefetcher;
-(void)setWorkdir:(NSURL *)arg1 ;
-(BOOL)tilePrefetchShouldPrefetchMetadataForFloor:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg1 ;
-(BOOL)tilePrefetchShouldPrefetchTileDataForFloor:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg1 ;
-(void)tilePrefetchForFloor:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg1 inVenue:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg2 updateRelevancy:(id)arg3 ;
-(void)tilePrefetchDidDownload:(const path*)arg1 forRequest:(id)arg2 ;
-(void)tilePrefetchFinishedAllDownloads;
-(void)loadVpnSetting;
-(void)_setWorkingdir:(id)arg1 ;
-(id)initWithWorkdir:(id)arg1 ;
-(void)onQueueOpportunisticPrefetchImport;
-(void)onQueueClearTiles:(id)arg1 ;
-(BOOL)initializeDb;
-(BOOL)initializeDb:(BOOL)arg1 ;
-(void)onQueueClearTiles:(id)arg1 fromDbs:(vector<std::__1::shared_ptr<FilesystemDb>, std::__1::allocator<std::__1::shared_ptr<FilesystemDb> > >*)arg2 ;
-(id)onQueueCreateProviderForConnection:(id)arg1 ;
-(void)keybagDidLock;
-(void)keybagDidUnlock;
-(void)onQueueTilePrefetchForFloor:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg1 inVenue:(const basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >*)arg2 updateRelevancy:(id)arg3 ;
-(pair<long, long>)onQueueNumFloors;
-(id)init;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)shutdown;
-(void)onQueueShutdown;
@end

