/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:09 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/libexec/coreduetd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_source;
#import <coreduetd/coreduetd-Structs.h>
@class CDDAirplaneModeMonitor, CDDAppStateMonitor, CDDBacklightMonitor, CDDBatteryMonitor, CDDSleepwakeMonitor, CDDNotifydMonitor, CDContextStore, NSObject, CDDCoreData, CDDNetworkMonitor, CDDTrending, CDDPools, CDDAttributeTable, CDDBudgetModulator, CDDPlugins, CDDEnergyAccounting, CDDNetworkAccounting, CDDAdmissionCheckQueue, CDDCommunicator, CDDMitigationMux, CDDPeriodicTask, CDDPrivacyMonitor, CDDAggD, NSDictionary, Cache, CDDConfig, CDDebug, NSMutableDictionary, CDDDiagnostics, CDDSystemBudgets, CDDThermalMonitor, CDDThermalAdmissionController, CDDWatchKitAdmissionController, CDDWatchUpdateController, CDDRemoteBudgetPolicy;

@interface CDD : NSObject {

	CDDAirplaneModeMonitor* airplanemode;
	CDDAppStateMonitor* appstatechange;
	CDDBacklightMonitor* backlight;
	CDDBatteryMonitor* battery;
	CDDSleepwakeMonitor* sleepwake;
	CDDNotifydMonitor* notifyd;
	CDContextStore* contextStore;
	NSObject*<OS_dispatch_queue> contextStoreQueue;
	CDDCoreData* coreData;
	CDDNetworkMonitor* networkMonitor;
	CDDTrending* trending;
	CDDPools* pools;
	CDDAttributeTable* attributeTable;
	CDDBudgetModulator* budgetModulator;
	CDDPlugins* plugins;
	CDDEnergyAccounting* powerAccountant;
	CDDNetworkAccounting* networkAccountant;
	CDDAdmissionCheckQueue* admissionCheckQueue;
	CDDCommunicator* communicator;
	CDDMitigationMux* mitigationMux;
	CDDPeriodicTask* periodicTask;
	CDDPrivacyMonitor* privacyMonitor;
	CDDAggD* aggDReport;
	NSDictionary* systemAttributeIdMapper;
	NSDictionary* systemBudgetIdMapper;
	NSObject*<OS_dispatch_queue> cullingTimerQueue;
	NSObject*<OS_dispatch_source> cullingTimer;
	NSObject*<OS_dispatch_queue> logQueue;
	Cache* attributeNameReverseMapFromIntegerIDCache;
	Cache* appBundleIDReverseMapFromIntegerIDCache;
	Cache* poolNameReverseMapFromIntegerIDCache;
	Cache* integerIDReverseMapFromAttributeNameIDCache;
	Cache* integerIDReverseMapFromAppBundleIDCache;
	Cache* integerIdReverseMapFromDeviceDescriptionCache;
	Cache* deviceDescriptionReverseMapFromIntegerIdCache;
	CDDConfig* config;
	CDDebug* debug;
	BOOL isIdle;
	int notificationOTAToken;
	int settingsToken;
	int bundleIdRetryToken;
	int localAppChangeToken;
	NSMutableDictionary* postOccurrenceMonitors;
	CDDDiagnostics* diagnostics;
	BOOL classCLocked;
	BOOL passcodeLocked;
	BOOL inClassroomMode;
	CDDAirplaneModeMonitor* airplaneModeMonitor;
	CDDAppStateMonitor* appStateMonitor;
	CDDBacklightMonitor* backlightMonitor;
	CDDBatteryMonitor* batteryMonitor;
	CDDSleepwakeMonitor* sleepWakeMonitor;
	CDDNotifydMonitor* notifydMonitor;
	CDDSystemBudgets* systemBudgets;
	CDDThermalMonitor* thermalMonitor;
	CDDThermalAdmissionController* admissionThermal;
	CDDWatchKitAdmissionController* watchkit;
	CDDWatchUpdateController* watchUpdate;
	CDDRemoteBudgetPolicy* remoteBudget;
	NSDictionary* clientBundleMap;

}

@property (nonatomic,readonly) CDDAirplaneModeMonitor * airplaneModeMonitor; 
@property (nonatomic,readonly) CDDAppStateMonitor * appStateMonitor; 
@property (nonatomic,readonly) CDDBacklightMonitor * backlightMonitor; 
@property (nonatomic,readonly) CDDBatteryMonitor * batteryMonitor; 
@property (nonatomic,readonly) CDDSleepwakeMonitor * sleepWakeMonitor; 
@property (nonatomic,readonly) CDDNotifydMonitor * notifydMonitor; 
@property (nonatomic,readonly) CDContextStore * contextStore; 
@property (nonatomic,readonly) CDDCoreData * coreData; 
@property (nonatomic,readonly) CDDNetworkMonitor * networkMonitor; 
@property (nonatomic,readonly) CDDTrending * trending; 
@property (nonatomic,readonly) CDDPools * pools; 
@property (nonatomic,readonly) CDDAttributeTable * attributeTable; 
@property (nonatomic,readonly) CDDebug * debug; 
@property (assign) BOOL isIdle; 
@property (nonatomic,readonly) CDDConfig * config; 
@property (nonatomic,readonly) CDDBudgetModulator * budgetModulator; 
@property (nonatomic,readonly) CDDPlugins * plugins; 
@property (nonatomic,readonly) CDDSystemBudgets * systemBudgets; 
@property (nonatomic,readonly) CDDEnergyAccounting * powerAccountant; 
@property (nonatomic,readonly) CDDThermalMonitor * thermalMonitor; 
@property (nonatomic,readonly) CDDNetworkAccounting * networkAccountant; 
@property (nonatomic,readonly) CDDAdmissionCheckQueue * admissionCheckQueue; 
@property (nonatomic,readonly) CDDCommunicator * communicator; 
@property (nonatomic,readonly) CDDMitigationMux * mitigationMux; 
@property (nonatomic,readonly) CDDPeriodicTask * periodicTask; 
@property (nonatomic,readonly) CDDPrivacyMonitor * privacyMonitor; 
@property (nonatomic,readonly) CDDAggD * aggDReport; 
@property (nonatomic,readonly) CDDThermalAdmissionController * admissionThermal; 
@property (nonatomic,readonly) CDDWatchKitAdmissionController * watchkit; 
@property (nonatomic,readonly) CDDWatchUpdateController * watchUpdate; 
@property (nonatomic,readonly) CDDRemoteBudgetPolicy * remoteBudget; 
@property (readonly) BOOL classCLocked; 
@property (readonly) BOOL passcodeLocked; 
@property (readonly) BOOL inClassroomMode; 
@property (nonatomic,readonly) NSDictionary * clientBundleMap; 
@property (nonatomic,readonly) CDDDiagnostics * diagnostics; 
+(id)fetchTemplateWithKey:(id)arg1 OnContext:(id)arg2 withEntityNamed:(id)arg3 predicateString:(id)arg4 parameters:(id)arg5 batchSize:(unsigned long long)arg6 ;
+(id)sharedInstance;
-(CDDCoreData *)coreData;
-(void)recordIntegerValue:(long long)arg1 forEvent:(id)arg2 ;
-(CDDPrivacyMonitor *)privacyMonitor;
-(CDDCommunicator *)communicator;
-(CDDThermalAdmissionController *)admissionThermal;
-(void)dumpLight;
-(void)handleOTAupdate;
-(CDDPeriodicTask *)periodicTask;
-(CDDBatteryMonitor *)batteryMonitor;
-(CDDSystemBudgets *)systemBudgets;
-(CDDAttributeTable *)attributeTable;
-(CDDAggD *)aggDReport;
-(BOOL)classCLocked;
-(BOOL)registerPostOccurrenceMonitorForAttributeId:(unsigned long long)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)findOrAllocIntegerIdForAppBundleId:(id)arg1 ;
-(CDDTrending *)trending;
-(BOOL)attributeId:(unsigned long long)arg1 occurredWithValue:(id)arg2 cost:(long long)arg3 type:(long long)arg4 clientId:(unsigned long long)arg5 onDate:(id)arg6 risingEdge:(BOOL)arg7 fallingEdge:(BOOL)arg8 ;
-(id)integerIdReverseMapFromAttributeName:(id)arg1 clientId:(unsigned long long)arg2 ;
-(id)integerIdReverseMapFromPoolName:(id)arg1 clientId:(unsigned long long)arg2 ;
-(CDDWatchKitAdmissionController *)watchkit;
-(id)findOrAllocIntegerIdForDeviceDescription:(id)arg1 ;
-(unsigned long long)registerClientPool:(id)arg1 withType:(long long)arg2 clientId:(unsigned long long)arg3 parentIntegerId:(unsigned long long)arg4 maxFraction:(double)arg5 error:(id*)arg6 ;
-(void)recordStringValue:(id)arg1 forEvent:(id)arg2 ;
-(CDDWatchUpdateController *)watchUpdate;
-(id)pmfOverSiblingEventsWithParams:(SCD_Struct_CD8*)arg1 ;
-(id)bundleIDFromClientID:(unsigned long long)arg1 withAttribute:(unsigned long long)arg2 withValue:(id)arg3 ;
-(id)attributeNameReverseMapFromIntegerId:(id)arg1 ;
-(CDDRemoteBudgetPolicy *)remoteBudget;
-(CDDThermalMonitor *)thermalMonitor;
-(void)setIsIdle:(BOOL)arg1 ;
-(BOOL)readConfigParamsFromPlist;
-(void)setDefaultConfigParams;
-(unsigned long long)registerClientAttribute:(id)arg1 withType:(long long)arg2 clientId:(unsigned long long)arg3 dataProtectionClass:(id)arg4 error:(id*)arg5 ;
-(id)retrieveForecast:(SCD_Struct_CD8*)arg1 withTemporalLeeway:(double)arg2 identifier:(unsigned)arg3 error:(id*)arg4 ;
-(id)pmfOverHourOfDayWithParams:(SCD_Struct_CD8*)arg1 ;
-(id)histogramOfEventsWithParams:(SCD_Struct_CD8*)arg1 ;
-(id)historyWithParams:(SCD_Struct_CD8*)arg1 filter:(long long)arg2 ;
-(void)invalidatePoolIDMapCache;
-(id)queryUniqueApps;
-(BOOL)entryOlderThan:(unsigned long long)arg1 ;
-(void)invalidateAttributeIDMapCache;
-(id)queryLaunchedSince:(unsigned long long)arg1 NonPrewarmedSince:(unsigned long long)arg2 ;
-(id)queryAttributeNamesForClientId:(unsigned long long)arg1 ;
-(id)queryPoolNamesForClientId:(unsigned long long)arg1 ;
-(void)deleteDataForClientId:(unsigned long long)arg1 ;
-(id)admissionIdFromAttributeId:(unsigned long long)arg1 clientId:(unsigned long long)arg2 attributeType:(long long)arg3 attributeValues:(id)arg4 admissionCheckType:(long long)arg5 options:(id)arg6 ;
-(id)representationStringFromAttribute:(unsigned long long)arg1 clientId:(unsigned long long)arg2 type:(long long)arg3 value:(id)arg4 error:(id*)arg5 ;
-(BOOL)inClassroomMode;
-(CDDMitigationMux *)mitigationMux;
-(BOOL)isSupportedQueryForStatistic:(long long)arg1 repeated:(BOOL)arg2 ;
-(id)statistic:(long long)arg1 forParameters:(SCD_Struct_CD8*)arg2 repeated:(BOOL)arg3 ;
-(id)retrieveStatistics:(long long)arg1 params:(SCD_Struct_CD8*)arg2 identifier:(unsigned)arg3 error:(id*)arg4 ;
-(id)remoteFocalApp:(unsigned long long)arg1 error:(id*)arg2 ;
-(id)registeredDevicesWithError:(id*)arg1 ;
-(id)registeredDeviceFromDescription:(id)arg1 error:(id*)arg2 ;
-(id)remoteSystemData:(unsigned)arg1 error:(id*)arg2 ;
-(id)requestForecastDataFromDevice:(unsigned)arg1 params:(SCD_Struct_CD8*)arg2 error:(id*)arg3 ;
-(id)requestStatisticDataFromDevice:(unsigned)arg1 statistic:(long long)arg2 params:(SCD_Struct_CD8*)arg3 error:(id*)arg4 ;
-(id)getTransactionWithIdentifier:(unsigned long long)arg1 ;
-(CDDAdmissionCheckQueue *)admissionCheckQueue;
-(void)backgroundLaunchStarted:(id)arg1 ;
-(void)backgroundLaunchEnded:(id)arg1 ;
-(CDDEnergyAccounting *)powerAccountant;
-(void)invalidateDeviceIDMapCaches;
-(BOOL)saveForecast:(id)arg1 queryParameters:(SCD_Struct_CD8*)arg2 deviceIdentifier:(id)arg3 error:(id*)arg4 ;
-(BOOL)saveStatistics:(long long)arg1 statistics:(id)arg2 queryParameters:(SCD_Struct_CD8*)arg3 deviceIdentifier:(id)arg4 error:(id*)arg5 ;
-(id)deviceDescriptionReverseMapFromIntegerId:(id)arg1 ;
-(BOOL)getRegistrationInfoForPool:(unsigned long long)arg1 clientId:(unsigned long long)arg2 budgetType:(long long*)arg3 parentIntegerId:(unsigned long long*)arg4 maxFraction:(double*)arg5 error:(id*)arg6 ;
-(CDDBudgetModulator *)budgetModulator;
-(BOOL)classroomModeCheck;
-(void)classCAndPasscodeCheck;
-(void)readVersionFromBookkeeping:(unsigned long long*)arg1 budgetVer:(unsigned long long*)arg2 ;
-(void)registerSystemAttributeIfAbsent:(id)arg1 ;
-(void)registerSystemBudgetIfAbsent:(id)arg1 poolID:(unsigned long long)arg2 ;
-(void)initializeBookkeepingIfAbsent:(unsigned long long)arg1 budgetVersion:(unsigned long long)arg2 ;
-(void)configPluginOverrides;
-(void)setDatabaseAge:(id)arg1 ;
-(void)handleSettingsChange;
-(void)checkPoolAssignment;
-(void)setupCommunicator;
-(BOOL)passcodeLocked;
-(unsigned)hashFromDeviceDescription:(id)arg1 ;
-(id)integerIdReverseMapFromDeviceDescription:(id)arg1 ;
-(id)integerIdReverseMapFromAppBundleId:(id)arg1 ;
-(id)appBundleIdReverseMapFromIntegerId:(id)arg1 ;
-(id)fetchDeviceDescriptionReverseMapFromIntegerId:(id)arg1 ;
-(id)fetchAppBundleIdReverseMapFromIntegerId:(id)arg1 ;
-(id)idToNameCacheLookup:(id)arg1 inCache:(int)arg2 ;
-(id)fetchAttributeNameReverseMapFromIntegerId:(id)arg1 ;
-(void)insertIdAndNameCacheForType:(int)arg1 integerId:(id)arg2 name:(id)arg3 ;
-(id)fetchPoolNameReverseMapFromIntegerId:(id)arg1 ;
-(id)fetchIntegerIdReverseMapFromDeviceDescription:(id)arg1 ;
-(id)fetchIntegerIdReverseMapFromAppBundleId:(id)arg1 ;
-(id)fetchIntegerIdReverseMapFromAttributeName:(id)arg1 clientId:(unsigned long long)arg2 ;
-(id)contextForAttributeId:(unsigned long long)arg1 ;
-(id)entityDescriptionForAttributeId:(unsigned long long)arg1 ;
-(id)valueColumnNameForAttributeId:(unsigned long long)arg1 ;
-(BOOL)shouldPredicateOnIntegerIdIfOnlyInterestedInAttributeId:(unsigned long long)arg1 ;
-(id)predictateStringFromParamsWithoutValueCondition:(SCD_Struct_CD8*)arg1 ;
-(id)valuePredicateFromParams:(SCD_Struct_CD8*)arg1 ;
-(BOOL)permitDatabaseAccessGivenLockStateForAttributeId:(unsigned long long)arg1 ;
-(unsigned long long)calculateActualStartEpoch:(unsigned long long)arg1 endepoch:(unsigned long long)arg2 recurrenceInterval:(unsigned long long)arg3 ;
-(id)predicateFromParams:(SCD_Struct_CD8*)arg1 ;
-(id)queryWithParamsBasic:(SCD_Struct_CD8*)arg1 predicate:(id)arg2 ;
-(id)basisObjectFromAttributeId:(unsigned long long)arg1 managedObject:(id)arg2 ;
-(id)histogram:(SCD_Struct_CD8*)arg1 ;
-(void)stuffDictionary:(id*)arg1 withBasisObject:(id)arg2 xpcKey:(const char*)arg3 ;
-(id)computeDatabaseAge;
-(BOOL)discardOccurredValue:(unsigned long long)arg1 withValue:(id)arg2 ;
-(void)deleteForecastDataForClientId:(unsigned long long)arg1 ;
-(void)doDeleteForecastDataForClientId:(unsigned long long)arg1 whichContext:(id)arg2 ;
-(void)loadParamsFromDict:(id)arg1 userDefaults:(id)arg2 ;
-(void)recordBooleanValue:(BOOL)arg1 forEvent:(id)arg2 ;
-(id)poolNameReverseMapFromIntegerId:(id)arg1 ;
-(void)registerManualBudgetIfAbsent:(id)arg1 poolID:(unsigned long long)arg2 ;
-(void)invalidateBundleIDMapCaches;
-(CDDAirplaneModeMonitor *)airplaneModeMonitor;
-(CDDBacklightMonitor *)backlightMonitor;
-(CDDSleepwakeMonitor *)sleepWakeMonitor;
-(CDDNotifydMonitor *)notifydMonitor;
-(CDDNetworkAccounting *)networkAccountant;
-(NSDictionary *)clientBundleMap;
-(void)dealloc;
-(id)init;
-(BOOL)isLocked;
-(CDDConfig *)config;
-(CDDebug *)debug;
-(BOOL)isClassCLocked;
-(CDDDiagnostics *)diagnostics;
-(BOOL)isIdle;
-(void)log:(const char*)arg1 ;
-(CDDAppStateMonitor *)appStateMonitor;
-(CDDPools *)pools;
-(CDDPlugins *)plugins;
-(CDDNetworkMonitor *)networkMonitor;
-(void)dumpAll;
-(CDContextStore *)contextStore;
@end

