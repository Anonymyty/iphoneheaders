/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:30 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/libexec/sharingd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <sharingd/sharingd-Structs.h>
#import <sharingd/SDMISManagerDelegate.h>

@protocol SDHotSpotManagerDelegate, OS_dispatch_queue;
@class SDMISManager, NSObject, NSTimer, NSMutableArray, NSString;

@interface SDHotSpotManager : NSObject <SDMISManagerDelegate> {

	WiFiManagerClientRef _wifiClient;
	WiFiDeviceClientRef _wifiDevice;
	SDMISManager* _misManager;
	BOOL _isWifiPowerOn;
	BOOL _tetheringSupported;
	BOOL _startedHostAP;
	BOOL _flippedHotspotSwitch;
	id<SDHotSpotManagerDelegate> _delegate;
	id _hostAPNetwork;
	NSObject*<OS_dispatch_queue> _workQueue;
	NSTimer* _networkTimer;
	NSMutableArray* _handlers;

}

@property (readonly) NSString * hotSpotName; 
@property (readonly) NSString * hotSpotPassword; 
@property (getter=isTetheringSupported) BOOL tetheringSupported;               //@synthesize tetheringSupported=_tetheringSupported - In the implementation block
@property (getter=isTetheringInUse,readonly) BOOL tetheringInUse; 
@property (__weak) id<SDHotSpotManagerDelegate> delegate;                      //@synthesize delegate=_delegate - In the implementation block
@property (assign) BOOL startedHostAP;                                         //@synthesize startedHostAP=_startedHostAP - In the implementation block
@property (assign) BOOL flippedHotspotSwitch;                                  //@synthesize flippedHotspotSwitch=_flippedHotspotSwitch - In the implementation block
@property (retain) id hostAPNetwork;                                           //@synthesize hostAPNetwork=_hostAPNetwork - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> workQueue;                     //@synthesize workQueue=_workQueue - In the implementation block
@property (retain) NSTimer * networkTimer;                                     //@synthesize networkTimer=_networkTimer - In the implementation block
@property (retain) NSMutableArray * handlers;                                  //@synthesize handlers=_handlers - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)addObservers;
-(void)removeObservers;
-(void)misStateChanged:(id)arg1 ;
-(BOOL)isTetheringInUse;
-(BOOL)isTetheringSupported;
-(void)startTetheringWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)onqueue_updateTetheringSupported;
-(void)onqueue_updateHostAPNetwork;
-(void)debugInfoRequest:(id)arg1 ;
-(void)firstUnlockStateChanged:(id)arg1 ;
-(BOOL)netRBTetheringSupported;
-(id)hostAPNetwork;
-(BOOL)flippedHotspotSwitch;
-(void)setTetheringSupported:(BOOL)arg1 ;
-(BOOL)isNetworkHostAP:(WiFiNetworkRef)arg1 ;
-(BOOL)shouldTurnOffTethering;
-(void)onqueue_startTetheringWithCompletionHandler:(/*^block*/id)arg1 ;
-(NSString *)hotSpotPassword;
-(NSString *)hotSpotName;
-(id)hotSpotChannel;
-(void)turnOffDiscovery;
-(void)restartNetworkTimer;
-(void)notifyHostAPError:(id)arg1 ;
-(void)onqueue_handleSwitchCondtionsChanged;
-(void)networkTimerFired:(id)arg1 ;
-(void)onqueue_cleanUpFailedNetworkBringUp;
-(BOOL)setHotSpotPassword:(NSString *)arg1 ;
-(id)_createDefaultPassword;
-(void)onqueue_handleHostAPChanged:(id)arg1 ;
-(void)setHostAPNetwork:(id)arg1 ;
-(BOOL)startedHostAP;
-(void)invalidateNetworkTimer;
-(void)setStartedHostAP:(BOOL)arg1 ;
-(void)notifyHostAPActivated;
-(BOOL)isTethering;
-(void)stopTethering;
-(void)handleHostAPChanged:(id)arg1 ;
-(void)setFlippedHotspotSwitch:(BOOL)arg1 ;
-(NSTimer *)networkTimer;
-(void)setNetworkTimer:(NSTimer *)arg1 ;
-(void)setDelegate:(id<SDHotSpotManagerDelegate>)arg1 ;
-(void)dealloc;
-(id<SDHotSpotManagerDelegate>)delegate;
-(id)initWithDelegate:(id)arg1 ;
-(void)setHandlers:(NSMutableArray *)arg1 ;
-(NSMutableArray *)handlers;
-(void)setWorkQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSObject*<OS_dispatch_queue>)workQueue;
@end

