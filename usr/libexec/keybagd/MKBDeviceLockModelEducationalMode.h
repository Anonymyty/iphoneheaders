/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:18 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/libexec/keybagd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
@class NSString, NSMutableDictionary, NSObject, NSDictionary;

@interface MKBDeviceLockModelEducationalMode : NSObject {

	NSString* _lockStatePath;
	NSMutableDictionary* _lockStateCache;
	NSString* _uid;
	NSObject*<OS_dispatch_queue> _persistentStateQueue;
	BOOL _speculativePasscodeFailureChargeOutstanding;
	NSDictionary* _originalDefaultsForRollback;
	BOOL _pendingWipe;
	BOOL _permanentlyBlocked;
	double _unblockTime;
	unsigned long long _failedPasscodeAttempts;

}

@property (getter=isTemporarilyBlocked,nonatomic,readonly) BOOL temporarilyBlocked; 
@property (getter=isPermanentlyBlocked,nonatomic,readonly) BOOL permanentlyBlocked; 
@property (getter=isWipePending,nonatomic,readonly) BOOL isWipePending; 
@property (nonatomic,readonly) double timeUntilUnblockedSinceReferenceDate; 
@property (nonatomic,readonly) unsigned long long failedPasscodeAttempts; 
+(id)sharedLockModelWithUID:(unsigned)arg1 ;
-(id)initWithUID:(unsigned)arg1 ;
-(id)initWithJournalPath:(id)arg1 uid:(unsigned)arg2 ;
-(void)_persistentStateQueue_rollbackSpeculativeFailureCharge;
-(void)_persistentStateQueue_unlockFailed;
-(void)_setLockStateValue:(id)arg1 forKey:(id)arg2 ;
-(id)_lockStateValueForKey:(id)arg1 ofType:(Class)arg2 ;
-(void)_loadLockState;
-(void)notePasscodeUnlockFailed;
-(BOOL)isWipePending;
-(unsigned long long)failedPasscodeAttempts;
-(void)userDeleted;
-(void)dealloc;
-(double)timeUntilUnblockedSinceReferenceDate;
-(void)notePasscodeEntryBegan;
-(void)notePasscodeEntryCancelled;
-(void)notePasscodeUnlockSucceeded;
-(BOOL)isTemporarilyBlocked;
-(BOOL)isPermanentlyBlocked;
-(void)_persistentStateQueue_loadLockState;
-(void)_persistentStateQueue_beginSpeculativeFailureCharge;
-(void)_persistentStateQueue_cancelSpeculativeFailureCharge;
-(void)_persistentStateQueue_unlockSucceeded;
@end

