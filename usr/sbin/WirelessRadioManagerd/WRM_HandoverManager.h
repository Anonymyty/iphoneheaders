/*
* This header is generated by classdump-dyld 1.0
* on Thursday, January 26, 2017 at 12:28:38 AM Eastern Standard Time
* Operating System: Version 9.3.3 (Build 13G34)
* Image Source: /usr/sbin/WirelessRadioManagerd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <WirelessRadioManagerd/WirelessRadioManagerd-Structs.h>
@class NSObject, WRM_CTService, WRM_SCService, WCM_WiFiController, WRM_WiFiCallingController, WRM_SymptomsService, WRM_iRATConfig, WRM_MotionController, WRM_QMIClient, WRM_IPTelephonyController, WRM_MetricsService, NSMutableArray, NSDate;

@interface WRM_HandoverManager : NSObject {

	NSObject*<OS_dispatch_queue> mQueue;
	WRM_CTService* mCTService;
	WRM_SCService* mSCService;
	WCM_WiFiController* mWiFi;
	WRM_WiFiCallingController* mWiFiCalling;
	WRM_SymptomsService* mSymtomsService;
	WRM_iRATConfig* miRATConfig;
	WRM_MotionController* mMotionController;
	WRM_QMIClient* mQMIClient;
	WRM_IPTelephonyController* mIPTelephonyController;
	WRM_MetricsService* mMetrics;
	int mReasons;
	WRMWiFiCallingEnd* wrmWifiCallingEnd;
	BOOL deviceAttachedWithCellularNetwork;
	BOOL deviceRegisteredWithCellularNetwork;
	NSMutableArray* miRATClientContexts;
	unsigned long long mActivePolicies;
	BOOL mWiFiSwitchedOn;
	NSDate* mStartTime;
	double prevTimeSinceStart;
	NSDate* mAudioEvaluationTimer;
	double mTimeSinceAudioEvaluationStarted;
	NSDate* mLatteContextStartedTimer;
	double mTimeSinceLatteContextStarted;

}
+(id)WRM_HandoverManagerSingleton;
+(id)allocWithZone:(NSZone*)arg1 ;
-(void)handleInternalMessage:(id)arg1 ;
-(void)handleMotionUpdate:(id)arg1 ;
-(void)handleIKEv2RTTUpdate:(id)arg1 ;
-(BOOL)isCellularEntryCriteriaMetForIMSVoiceCallCurrentLinkWiFi;
-(BOOL)isCellularEntryCriteriaMetForVoiceCallCurrentLinkNone;
-(BOOL)isCellularExitCriteriaMetForIMSVoiceCallCurrentLinkLTE:(BOOL)arg1 ;
-(BOOL)isCellularExitCriteriaMetForVoiceCallCallCurrentLinkUMTS;
-(BOOL)isCellularEntryCriteriaMetForIMSThumpCallCurrentLinkWiFi;
-(BOOL)isCellularExitCriteriaMetForIMSThumpCallCurrentLinkCellular;
-(void)queryIKEv2Metrics;
-(void)monitorNetworkSymptoms:(int)arg1 ;
-(BOOL)isCellularRadioMetricsGoodEnoughForIMSVoIP:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 :(BOOL)arg4 ;
-(void)handleLinkPrefSubscribe:(id)arg1 ;
-(void)handleSubscribeStatusUpdate:(id)arg1 :(BOOL)arg2 ;
-(void)handleWiFiStateChaneEvents:(id)arg1 ;
-(id)getiRATClientFromList:(int)arg1 ;
-(BOOL)doesIRATClientSubscriptionContextExist;
-(BOOL)toggleWiFiLQMIfNeeded;
-(id)getWiFiController;
-(void)existingContexts;
-(void)removeiRatClient:(id)arg1 ;
-(BOOL)enableiRATManager;
-(void)handleSessionNotification:(id)arg1 ;
-(void)addiRatClient:(id)arg1 ;
-(void)deleteiRATClient:(int)arg1 ;
-(void)handleControllerAvailability:(unsigned long long)arg1 ;
-(id)getQueue;
-(BOOL)needWiFiLQM;
-(void)updateControllerSession:(id)arg1 ofId:(unsigned long long)arg2 ;
-(void)updateControllerState:(id)arg1 ;
-(void)sendMessage:(unsigned long long)arg1 withMsg:(id)arg2 ;
-(id)getiRATConfigController;
-(id)getSymptomsService;
-(void)handleIPTelephonyMetrics:(id)arg1 ;
-(void)setHandoverAlgorithmType:(int)arg1 ;
-(void)evaluateHandover;
-(id)getCTService;
-(id)getSCService;
-(BOOL)isActiveHandoverSupported;
-(int)getHandoverAlgorithmType:(unsigned long long)arg1 ;
-(void)updateHandoverReasonCode:(int)arg1 ;
-(void)handlePeriodicRTPMetrics:(id)arg1 ;
-(void)configureRTPMetricsReporting;
-(void)setHOAlertUI:(BOOL)arg1 ;
-(void)updateActiveHandoverStatus;
-(void)createSymptomsService;
-(void)createQMIClient;
-(void)monitorTransportMetrics;
-(void)handleWiFiConfig;
-(void)handleWiFiLinkQualityUpdate:(id)arg1 ;
-(void)handleCellularLinkQualityUpdate:(id)arg1 ;
-(void)registerForCTNotifications;
-(void)registerForSCNotifications;
-(void)setIWLANServiceType:(int)arg1 ;
-(void)handleCTConfig;
-(void)handleNetworkdConfig;
-(id)getMotionController;
-(int)evaluateLinkWiFiPreferred:(unsigned long long)arg1 :(unsigned long long)arg2 :(BOOL)arg3 :(int)arg4 ;
-(int)evaluateLinkBestRadioPreferred:(unsigned long long)arg1 :(unsigned long long)arg2 :(BOOL)arg3 :(int)arg4 ;
-(int)evaluateLinkCellularPreferred:(unsigned long long)arg1 :(unsigned long long)arg2 :(BOOL)arg3 :(int)arg4 ;
-(BOOL)canWiFiMeetActiveApplicationRequirements:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)canCellularMeetApplicationRequirement:(unsigned long long)arg1 :(unsigned long long)arg2 :(BOOL)arg3 :(int)arg4 :(BOOL)arg5 ;
-(BOOL)canWiFiMeetIdleApplicationRequirements:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)isWiFiLinkEvaluationDesired;
-(void)initHandoverReasonCode;
-(int)evaluateLink:(unsigned long long)arg1 :(unsigned long long)arg2 :(BOOL)arg3 :(int)arg4 ;
-(void)showHOAlertUI:(BOOL)arg1 ;
-(BOOL)handoverEvaluationRequired;
-(void)setPingPongTimerMultipler:(unsigned long long)arg1 :(int)arg2 :(unsigned long long)arg3 ;
-(id)getWiFiCallingController;
-(void)evaluateActiveCallQuality;
-(void)feedAWDCallEndStats;
-(void)resetActiveCallEvaluationMetrics;
-(void)resetActiveCallTimer;
-(int)getIWLANServiceType;
-(long long)getSNRHysteresis;
-(long long)getRSSIHysteresis;
-(BOOL)isWiFiArqQualityIndicatorGood:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 :(BOOL)arg4 ;
-(BOOL)isWiFiBeaconLossQualityIndicatorGood:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)isWiFiLoadQualityIndicatorGood:(unsigned long long)arg1 :(unsigned long long)arg2 :(BOOL)arg3 :(int)arg4 ;
-(BOOL)isWiFiSymtompsIndicatorGoodEnoughForIdleApplication:(unsigned long long)arg1 :(int)arg2 ;
-(BOOL)isWiFiSymtompsIndicatorGoodEnoughForActiveApplication:(unsigned long long)arg1 :(int)arg2 ;
-(BOOL)isWiFiVoIPQualityGoodEnough;
-(BOOL)canWiFiRadioMeetActiveApplicationRequirements:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)canWiFiTransportMeetActiveApplicationRequirements:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)isMovingAverageAudioQualityOfCurrentCallGood:(int)arg1 ;
-(BOOL)canWiFiRadioMeetIdleApplicationRequirements:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)canWiFiTransportMeetIdleApplicationRequirements:(unsigned long long)arg1 :(unsigned long long)arg2 :(int)arg3 ;
-(BOOL)isWiFiLinkActive;
-(void)setWiFiLinkDown:(BOOL)arg1 ;
-(void)dealloc;
-(id)init;
-(id)retain;
-(oneway void)release;
-(id)autorelease;
-(unsigned long long)retainCount;
-(id)copyWithZone:(NSZone*)arg1 ;
@end

